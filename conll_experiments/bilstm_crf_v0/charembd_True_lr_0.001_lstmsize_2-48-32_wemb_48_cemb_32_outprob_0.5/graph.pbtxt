node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "IsVariableInitialized"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/read"
  op: "Identity"
  input: "cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/Switch_1"
  input: "cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "cond/Merge"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train-data/sentence"
  op: "Placeholder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14990
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14990
        }
      }
    }
  }
}
node {
  name: "train-data/char_ids"
  op: "Placeholder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "train-data/label"
  op: "Placeholder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14990
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14990
        }
      }
    }
  }
}
node {
  name: "train-data/count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "train-data/buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
}
node {
  name: "train-data/seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "train-data/seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "train-data/Iterator"
  op: "Iterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train-data/TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "train-data/char_ids"
  input: "train-data/sentence"
  input: "train-data/label"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train-data/Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train-data/RepeatDataset"
  op: "RepeatDataset"
  input: "train-data/TensorSliceDataset"
  input: "train-data/count"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train-data/Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
}
node {
  name: "train-data/ShuffleDataset"
  op: "ShuffleDataset"
  input: "train-data/RepeatDataset"
  input: "train-data/buffer_size"
  input: "train-data/seed"
  input: "train-data/seed2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train-data/Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "train-data/BatchDataset/batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train-data/Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 64
      }
    }
  }
}
node {
  name: "train-data/BatchDataset"
  op: "BatchDataset"
  input: "train-data/ShuffleDataset"
  input: "train-data/BatchDataset/batch_size"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train-data/Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
}
node {
  name: "train-data/MakeIterator"
  op: "MakeIterator"
  input: "train-data/BatchDataset"
  input: "train-data/Iterator"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train-data/Iterator"
      }
    }
  }
}
node {
  name: "train-data/IteratorGetNext"
  op: "IteratorGetNext"
  input: "train-data/Iterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "train-data/IteratorGetNext"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "strided_slice"
  input: "strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Pack"
  input: "mul"
  input: "strided_slice_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "train-data/IteratorGetNext"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sentence-words-2-ids/table/hash_table"
  op: "HashTableV2"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_/opt/0.imaginea/git/i-tagger/conll_experiments/tf_data/0_vocab.tsv_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "sentence-words-2-ids/table/hash_table/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sentence-words-2-ids/table/hash_table/table_init/asset_filepath"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "/opt/0.imaginea/git/i-tagger/conll_experiments/tf_data/0_vocab.tsv"
      }
    }
  }
}
node {
  name: "sentence-words-2-ids/table/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "sentence-words-2-ids/table/hash_table"
  input: "sentence-words-2-ids/table/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: -1
    }
  }
}
node {
  name: "sentence-words-2-ids/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " "
      }
    }
  }
}
node {
  name: "sentence-words-2-ids/StringSplit"
  op: "StringSplit"
  input: "train-data/IteratorGetNext:1"
  input: "sentence-words-2-ids/Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "skip_empty"
    value {
      b: true
    }
  }
}
node {
  name: "sentence-words-2-ids/SparseToDense/default_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "<UNK>"
      }
    }
  }
}
node {
  name: "sentence-words-2-ids/SparseToDense"
  op: "SparseToDense"
  input: "sentence-words-2-ids/StringSplit"
  input: "sentence-words-2-ids/StringSplit:2"
  input: "sentence-words-2-ids/StringSplit:1"
  input: "sentence-words-2-ids/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "sentence-words-2-ids/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "sentence-words-2-ids/table/hash_table"
  input: "sentence-words-2-ids/SparseToDense"
  input: "sentence-words-2-ids/table/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ner-tags-2-ids/table/hash_table"
  op: "HashTableV2"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_/opt/0.imaginea/git/i-tagger/conll_experiments/tf_data/3_vocab.tsv_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ner-tags-2-ids/table/hash_table/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ner-tags-2-ids/table/hash_table/table_init/asset_filepath"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "/opt/0.imaginea/git/i-tagger/conll_experiments/tf_data/3_vocab.tsv"
      }
    }
  }
}
node {
  name: "ner-tags-2-ids/table/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "ner-tags-2-ids/table/hash_table"
  input: "ner-tags-2-ids/table/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: -1
    }
  }
}
node {
  name: "ner-tags-2-ids/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " "
      }
    }
  }
}
node {
  name: "ner-tags-2-ids/StringSplit"
  op: "StringSplit"
  input: "train-data/IteratorGetNext:2"
  input: "ner-tags-2-ids/Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "skip_empty"
    value {
      b: true
    }
  }
}
node {
  name: "ner-tags-2-ids/SparseToDense/default_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "O"
      }
    }
  }
}
node {
  name: "ner-tags-2-ids/SparseToDense"
  op: "SparseToDense"
  input: "ner-tags-2-ids/StringSplit"
  input: "ner-tags-2-ids/StringSplit:2"
  input: "ner-tags-2-ids/StringSplit:1"
  input: "ner-tags-2-ids/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "ner-tags-2-ids/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "ner-tags-2-ids/table/hash_table"
  input: "ner-tags-2-ids/SparseToDense"
  input: "ner-tags-2-ids/table/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ner-tags-2-ids/Cast"
  op: "Cast"
  input: "ner-tags-2-ids/hash_table_Lookup"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "3&\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.024709567427635193
      }
    }
  }
}
node {
  name: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.024709567427635193
      }
    }
  }
}
node {
  name: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 42
    }
  }
}
node {
  name: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/sub"
  op: "Sub"
  input: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/max"
  input: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/mul"
  op: "Mul"
  input: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/RandomUniform"
  input: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform"
  op: "Add"
  input: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/mul"
  input: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/EmbedSequence/embeddings"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9779
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "word-embed-layer/EmbedSequence/embeddings/Assign"
  op: "Assign"
  input: "word-embed-layer/EmbedSequence/embeddings"
  input: "word-embed-layer/EmbedSequence/embeddings/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "word-embed-layer/EmbedSequence/embeddings/read"
  op: "Identity"
  input: "word-embed-layer/EmbedSequence/embeddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/EmbedSequence/embedding_lookup"
  op: "Gather"
  input: "word-embed-layer/EmbedSequence/embeddings/read"
  input: "sentence-words-2-ids/hash_table_Lookup"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/keep_prob"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/Shape"
  op: "Shape"
  input: "word-embed-layer/EmbedSequence/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/random_uniform/min"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/random_uniform/max"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "word-embed-layer/dropout/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 42
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/random_uniform/sub"
  op: "Sub"
  input: "word-embed-layer/dropout/dropout/random_uniform/max"
  input: "word-embed-layer/dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/random_uniform/mul"
  op: "Mul"
  input: "word-embed-layer/dropout/dropout/random_uniform/RandomUniform"
  input: "word-embed-layer/dropout/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/random_uniform"
  op: "Add"
  input: "word-embed-layer/dropout/dropout/random_uniform/mul"
  input: "word-embed-layer/dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/add"
  op: "Add"
  input: "word-embed-layer/dropout/dropout/keep_prob"
  input: "word-embed-layer/dropout/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/Floor"
  op: "Floor"
  input: "word-embed-layer/dropout/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/div"
  op: "RealDiv"
  input: "word-embed-layer/EmbedSequence/embedding_lookup"
  input: "word-embed-layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/dropout/dropout/mul"
  op: "Mul"
  input: "word-embed-layer/dropout/dropout/div"
  input: "word-embed-layer/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/GreaterEqual/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "word-embed-layer/GreaterEqual"
  op: "GreaterEqual"
  input: "sentence-words-2-ids/hash_table_Lookup"
  input: "word-embed-layer/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/Cast"
  op: "Cast"
  input: "word-embed-layer/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word-embed-layer/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word-embed-layer/Sum"
  op: "Sum"
  input: "word-embed-layer/Cast"
  input: "word-embed-layer/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "X\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.22360679507255554
      }
    }
  }
}
node {
  name: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.22360679507255554
      }
    }
  }
}
node {
  name: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 42
    }
  }
}
node {
  name: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/sub"
  op: "Sub"
  input: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/max"
  input: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/mul"
  op: "Mul"
  input: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/RandomUniform"
  input: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform"
  op: "Add"
  input: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/mul"
  input: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "char_embed_layer/EmbedSequence/embeddings"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 88
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "char_embed_layer/EmbedSequence/embeddings/Assign"
  op: "Assign"
  input: "char_embed_layer/EmbedSequence/embeddings"
  input: "char_embed_layer/EmbedSequence/embeddings/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "char_embed_layer/EmbedSequence/embeddings/read"
  op: "Identity"
  input: "char_embed_layer/EmbedSequence/embeddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "char_embed_layer/EmbedSequence/embedding_lookup"
  op: "Gather"
  input: "char_embed_layer/EmbedSequence/embeddings/read"
  input: "train-data/IteratorGetNext"
  input: "^add"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/keep_prob"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/Shape"
  op: "Shape"
  input: "char_embed_layer/EmbedSequence/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/random_uniform/min"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/random_uniform/max"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "char_embed_layer/dropout/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 42
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/random_uniform/sub"
  op: "Sub"
  input: "char_embed_layer/dropout/dropout/random_uniform/max"
  input: "char_embed_layer/dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/random_uniform/mul"
  op: "Mul"
  input: "char_embed_layer/dropout/dropout/random_uniform/RandomUniform"
  input: "char_embed_layer/dropout/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/random_uniform"
  op: "Add"
  input: "char_embed_layer/dropout/dropout/random_uniform/mul"
  input: "char_embed_layer/dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/add"
  op: "Add"
  input: "char_embed_layer/dropout/dropout/keep_prob"
  input: "char_embed_layer/dropout/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/Floor"
  op: "Floor"
  input: "char_embed_layer/dropout/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/div"
  op: "RealDiv"
  input: "char_embed_layer/EmbedSequence/embedding_lookup"
  input: "char_embed_layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "char_embed_layer/dropout/dropout/mul"
  op: "Mul"
  input: "char_embed_layer/dropout/dropout/div"
  input: "char_embed_layer/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/Shape"
  op: "Shape"
  input: "char_embed_layer/dropout/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice"
  op: "StridedSlice"
  input: "chars_level_bilstm_layer/Shape"
  input: "chars_level_bilstm_layer/strided_slice/stack"
  input: "chars_level_bilstm_layer/strided_slice/stack_1"
  input: "chars_level_bilstm_layer/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice_1"
  op: "StridedSlice"
  input: "chars_level_bilstm_layer/Shape"
  input: "chars_level_bilstm_layer/strided_slice_1/stack"
  input: "chars_level_bilstm_layer/strided_slice_1/stack_1"
  input: "chars_level_bilstm_layer/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/strided_slice_2"
  op: "StridedSlice"
  input: "chars_level_bilstm_layer/Shape"
  input: "chars_level_bilstm_layer/strided_slice_2/stack"
  input: "chars_level_bilstm_layer/strided_slice_2/stack_1"
  input: "chars_level_bilstm_layer/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/Sum"
  op: "Sum"
  input: "word-embed-layer/Sum"
  input: "chars_level_bilstm_layer/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "chars_level_bilstm_layer/mul"
  op: "Mul"
  input: "chars_level_bilstm_layer/strided_slice"
  input: "chars_level_bilstm_layer/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/reduce_dimension_1/shape/2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/reduce_dimension_1/shape"
  op: "Pack"
  input: "chars_level_bilstm_layer/mul"
  input: "chars_level_bilstm_layer/strided_slice_2"
  input: "chars_level_bilstm_layer/reduce_dimension_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "chars_level_bilstm_layer/reduce_dimension_1"
  op: "Reshape"
  input: "char_embed_layer/dropout/dropout/mul"
  input: "chars_level_bilstm_layer/reduce_dimension_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/GreaterEqual/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/GreaterEqual"
  op: "GreaterEqual"
  input: "Reshape"
  input: "chars_level_bilstm_layer/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/Cast"
  op: "Cast"
  input: "chars_level_bilstm_layer/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/Sum_1/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/Sum_1"
  op: "Sum"
  input: "chars_level_bilstm_layer/Cast"
  input: "chars_level_bilstm_layer/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/range"
  op: "Range"
  input: "chars_level_bilstm_layer/encode_words/fw/range/start"
  input: "chars_level_bilstm_layer/encode_words/fw/Rank"
  input: "chars_level_bilstm_layer/encode_words/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/concat"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/fw/concat/values_0"
  input: "chars_level_bilstm_layer/encode_words/fw/range"
  input: "chars_level_bilstm_layer/encode_words/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/transpose"
  op: "Transpose"
  input: "chars_level_bilstm_layer/reduce_dimension_1"
  input: "chars_level_bilstm_layer/encode_words/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/sequence_length"
  op: "Identity"
  input: "chars_level_bilstm_layer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice/stack"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice/stack_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/Const"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/concat"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims_2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/Const_2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/concat_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Shape_1"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/stack"
  op: "Pack"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Equal"
  op: "Equal"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Shape_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/All"
  op: "All"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Equal"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor chars_level_bilstm_layer/encode_words/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor chars_level_bilstm_layer/encode_words/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Assert/Assert"
  op: "Assert"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/All"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Assert/Assert/data_0"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/stack"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Assert/Assert/data_2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/sequence_length"
  input: "^chars_level_bilstm_layer/encode_words/fw/fw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Shape_2"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_1"
  op: "StridedSlice"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Shape_2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_1/stack"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_1/stack_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Shape_3"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_2"
  op: "StridedSlice"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Shape_3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_2/stack"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_2/stack_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/ExpandDims"
  op: "ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/concat"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Const_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/zeros"
  op: "Fill"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/concat"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Min"
  op: "Min"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/CheckSeqLen"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Max"
  op: "Max"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/CheckSeqLen"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/range/start"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/strided_slice"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArray_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/range"
  input: "chars_level_bilstm_layer/encode_words/fw/transpose"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Enter_1"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Enter_2"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Enter_3"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Merge"
  op: "Merge"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_1"
  op: "Merge"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Enter_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2"
  op: "Merge"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Enter_2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3"
  op: "Merge"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Enter_3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Less"
  op: "Less"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Merge"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch"
  op: "Switch"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Merge"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_1"
  op: "Switch"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_2"
  op: "Switch"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_3"
  op: "Switch"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_1"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_2"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_3"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/read"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/read"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat/axis"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul"
  op: "MatMul"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Const"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split/split_dim"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split"
  op: "Split"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split/split_dim"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add/y"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add"
  op: "Add"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split:2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul"
  op: "Mul"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh"
  op: "Tanh"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1"
  op: "Mul"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1"
  op: "Add"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2"
  op: "Mul"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Select"
  op: "Select"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Select/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1"
  op: "Select"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual_1"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2"
  op: "Select"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual_2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Select"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/add/y"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/add"
  op: "Add"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Exit"
  op: "Exit"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_1"
  op: "Exit"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_2"
  op: "Exit"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_3"
  op: "Exit"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArray"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayStack/range/start"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArray"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayStack/range"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/range"
  op: "Range"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/range/start"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/Rank"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/concat_1"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/concat_1/values_0"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/range"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/fw/fw/transpose"
  op: "Transpose"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "chars_level_bilstm_layer/reduce_dimension_1"
  input: "chars_level_bilstm_layer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/range"
  op: "Range"
  input: "chars_level_bilstm_layer/encode_words/bw/range/start"
  input: "chars_level_bilstm_layer/encode_words/bw/Rank"
  input: "chars_level_bilstm_layer/encode_words/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/concat"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/bw/concat/values_0"
  input: "chars_level_bilstm_layer/encode_words/bw/range"
  input: "chars_level_bilstm_layer/encode_words/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/transpose"
  op: "Transpose"
  input: "chars_level_bilstm_layer/encode_words/bw/ReverseSequence"
  input: "chars_level_bilstm_layer/encode_words/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/sequence_length"
  op: "Identity"
  input: "chars_level_bilstm_layer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice/stack"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice/stack_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/Const"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/concat"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims_2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/Const_2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/concat_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Shape_1"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/stack"
  op: "Pack"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Equal"
  op: "Equal"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Shape_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/All"
  op: "All"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Equal"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor chars_level_bilstm_layer/encode_words/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor chars_level_bilstm_layer/encode_words/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Assert/Assert"
  op: "Assert"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/All"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Assert/Assert/data_0"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/stack"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Assert/Assert/data_2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/sequence_length"
  input: "^chars_level_bilstm_layer/encode_words/bw/bw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Shape_2"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_1"
  op: "StridedSlice"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Shape_2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_1/stack"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_1/stack_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Shape_3"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_2"
  op: "StridedSlice"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Shape_3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_2/stack"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_2/stack_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/ExpandDims"
  op: "ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/concat"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/ExpandDims"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Const_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/zeros"
  op: "Fill"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/concat"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Min"
  op: "Min"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/CheckSeqLen"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Max"
  op: "Max"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/CheckSeqLen"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/range/start"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/strided_slice"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArray_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/range"
  input: "chars_level_bilstm_layer/encode_words/bw/transpose"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Enter_1"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Enter_2"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Enter_3"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Merge"
  op: "Merge"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_1"
  op: "Merge"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Enter_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2"
  op: "Merge"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Enter_2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3"
  op: "Merge"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Enter_3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Less"
  op: "Less"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Merge"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch"
  op: "Switch"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Merge"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_1"
  op: "Switch"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_2"
  op: "Switch"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_3"
  op: "Switch"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_1"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_2"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_3"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/read"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/read"
  op: "Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat/axis"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul"
  op: "MatMul"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Const"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split/split_dim"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split"
  op: "Split"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split/split_dim"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add/y"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add"
  op: "Add"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split:2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul"
  op: "Mul"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh"
  op: "Tanh"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1"
  op: "Mul"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1"
  op: "Add"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2"
  op: "Mul"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Select"
  op: "Select"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Select/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1"
  op: "Select"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual_1"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2"
  op: "Select"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual_2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Select"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/add/y"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/add"
  op: "Add"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Exit"
  op: "Exit"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_1"
  op: "Exit"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_2"
  op: "Exit"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_3"
  op: "Exit"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArray"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayStack/range/start"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArray"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayStack/range"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/range"
  op: "Range"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/range/start"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/Rank"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/concat_1"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/concat_1/values_0"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/range"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/encode_words/bw/bw/transpose"
  op: "Transpose"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/ReverseSequence"
  op: "ReverseSequence"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/transpose"
  input: "chars_level_bilstm_layer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "chars_level_bilstm_layer/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/concat"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_3"
  input: "chars_level_bilstm_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/Reshape/shape/2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "chars_level_bilstm_layer/Reshape/shape"
  op: "Pack"
  input: "chars_level_bilstm_layer/strided_slice"
  input: "chars_level_bilstm_layer/strided_slice_1"
  input: "chars_level_bilstm_layer/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "chars_level_bilstm_layer/Reshape"
  op: "Reshape"
  input: "chars_level_bilstm_layer/concat"
  input: "chars_level_bilstm_layer/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/DropoutWrapperInit/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/DropoutWrapperInit/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/DropoutWrapperInit/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/DropoutWrapperInit_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/DropoutWrapperInit_1/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/DropoutWrapperInit_1/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/range"
  op: "Range"
  input: "word_level_lstm_layer/encod_sentence/fw/range/start"
  input: "word_level_lstm_layer/encod_sentence/fw/Rank"
  input: "word_level_lstm_layer/encod_sentence/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/concat"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/fw/concat/values_0"
  input: "word_level_lstm_layer/encod_sentence/fw/range"
  input: "word_level_lstm_layer/encod_sentence/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/transpose"
  op: "Transpose"
  input: "word-embed-layer/dropout/dropout/mul"
  input: "word_level_lstm_layer/encod_sentence/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/sequence_length"
  op: "Identity"
  input: "word-embed-layer/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice/stack"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice/stack_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/stack"
  op: "Pack"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Equal"
  op: "Equal"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Shape_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/All"
  op: "All"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Equal"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor word_level_lstm_layer/encod_sentence/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor word_level_lstm_layer/encod_sentence/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Assert/Assert"
  op: "Assert"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/All"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Assert/Assert/data_0"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/stack"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Assert/Assert/data_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/sequence_length"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Shape_2"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_1"
  op: "StridedSlice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Shape_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_1/stack"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_1/stack_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Shape_3"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_2"
  op: "StridedSlice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Shape_3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_2/stack"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_2/stack_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/ExpandDims"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/concat"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Const_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/zeros"
  op: "Fill"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/concat"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Min"
  op: "Min"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/CheckSeqLen"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Max"
  op: "Max"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/CheckSeqLen"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/range/start"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/range"
  input: "word_level_lstm_layer/encod_sentence/fw/transpose"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_1"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_2"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_3"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_4"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_5"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_4"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_5"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Less"
  op: "Less"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_1"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_2"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_3"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_4"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_5"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_1"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_2"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_3"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_4"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_5"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.14433756470680237
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.14433756470680237
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  op: "Assign"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat/axis"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul"
  op: "MatMul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Const"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split/split_dim"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split"
  op: "Split"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split/split_dim"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add/y"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split:2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
  op: "Tanh"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/keep_prob"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  op: "Sub"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/add"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/keep_prob"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/Floor"
  op: "Floor"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div"
  op: "RealDiv"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1/axis"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_5"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1"
  op: "MatMul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1"
  op: "BiasAdd"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Const_1"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1/split_dim"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1"
  op: "Split"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1/split_dim"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2/y"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1:2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
  op: "Tanh"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
  op: "Tanh"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/keep_prob"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform/max"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform/sub"
  op: "Sub"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform/max"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform/mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/add"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/keep_prob"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/Floor"
  op: "Floor"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div"
  op: "RealDiv"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select"
  op: "Select"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1"
  op: "Select"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_1"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2"
  op: "Select"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_3"
  op: "GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3"
  op: "Select"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_4"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_4"
  op: "GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4"
  op: "Select"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_4"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_5"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/add/y"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/add"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration_4"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/NextIteration_5"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_1"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_2"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_3"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_4"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_5"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/range/start"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/range"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 48
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/range"
  op: "Range"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/range/start"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/Rank"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/concat_1"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/concat_1/values_0"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/range"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/fw/fw/transpose"
  op: "Transpose"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "word-embed-layer/dropout/dropout/mul"
  input: "word-embed-layer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/range"
  op: "Range"
  input: "word_level_lstm_layer/encod_sentence/bw/range/start"
  input: "word_level_lstm_layer/encod_sentence/bw/Rank"
  input: "word_level_lstm_layer/encod_sentence/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/concat"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/bw/concat/values_0"
  input: "word_level_lstm_layer/encod_sentence/bw/range"
  input: "word_level_lstm_layer/encod_sentence/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/transpose"
  op: "Transpose"
  input: "word_level_lstm_layer/encod_sentence/bw/ReverseSequence"
  input: "word_level_lstm_layer/encod_sentence/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/sequence_length"
  op: "Identity"
  input: "word-embed-layer/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice/stack"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice/stack_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/concat_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/stack"
  op: "Pack"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Equal"
  op: "Equal"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Shape_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/All"
  op: "All"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Equal"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor word_level_lstm_layer/encod_sentence/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor word_level_lstm_layer/encod_sentence/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Assert/Assert"
  op: "Assert"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/All"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Assert/Assert/data_0"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/stack"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Assert/Assert/data_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/sequence_length"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Shape_2"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_1"
  op: "StridedSlice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Shape_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_1/stack"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_1/stack_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Shape_3"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_2"
  op: "StridedSlice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Shape_3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_2/stack"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_2/stack_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/ExpandDims"
  op: "ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/concat"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/ExpandDims"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Const_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/zeros"
  op: "Fill"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/concat"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Min"
  op: "Min"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/CheckSeqLen"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Max"
  op: "Max"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/CheckSeqLen"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/range/start"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/strided_slice"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/range"
  input: "word_level_lstm_layer/encod_sentence/bw/transpose"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_1"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_2"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_3"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_4"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_5"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_4"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5"
  op: "Merge"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_5"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Less"
  op: "Less"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_1"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_2"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_3"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_4"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_5"
  op: "Switch"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_1"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_2"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_3"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_4"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_5"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.14433756470680237
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.14433756470680237
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  op: "Assign"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat/axis"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul"
  op: "MatMul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Const"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split/split_dim"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split"
  op: "Split"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split/split_dim"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add/y"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split:2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
  op: "Tanh"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/keep_prob"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  op: "Sub"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform/max"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform/mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/add"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/keep_prob"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/Floor"
  op: "Floor"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div"
  op: "RealDiv"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1/axis"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_5"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1"
  op: "MatMul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1"
  op: "BiasAdd"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Const_1"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1/split_dim"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1"
  op: "Split"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1/split_dim"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2/y"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1:2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
  op: "Tanh"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
  op: "Sigmoid"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
  op: "Tanh"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/keep_prob"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform/max"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform/sub"
  op: "Sub"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform/max"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform/mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/add"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/keep_prob"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/Floor"
  op: "Floor"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div"
  op: "RealDiv"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul"
  op: "Mul"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select"
  op: "Select"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1"
  op: "Select"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_1"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2"
  op: "Select"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_3"
  op: "GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3"
  op: "Select"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_4"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_4"
  op: "GreaterEqual"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4"
  op: "Select"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_4"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_5"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/add/y"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/add"
  op: "Add"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration_4"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/NextIteration_5"
  op: "NextIteration"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_1"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_2"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_3"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_4"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_5"
  op: "Exit"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/range/start"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/range"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 48
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/range"
  op: "Range"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/range/start"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/Rank"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/concat_1"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/concat_1/values_0"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/range"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/encod_sentence/bw/bw/transpose"
  op: "Transpose"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/ReverseSequence"
  op: "ReverseSequence"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/transpose"
  input: "word-embed-layer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "word_level_lstm_layer/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "word_level_lstm_layer/concat"
  op: "ConcatV2"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/transpose"
  input: "word_level_lstm_layer/ReverseSequence"
  input: "word_level_lstm_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/sentence_words_concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/sentence_words_concat"
  op: "ConcatV2"
  input: "chars_level_bilstm_layer/Reshape"
  input: "word_level_lstm_layer/concat"
  input: "char_word_embeddings-mergeing_layer/sentence_words_concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/keep_prob"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/Shape"
  op: "Shape"
  input: "char_word_embeddings-mergeing_layer/sentence_words_concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform/min"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform/max"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 42
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform/sub"
  op: "Sub"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform/max"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform/mul"
  op: "Mul"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform/RandomUniform"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform"
  op: "Add"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform/mul"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/add"
  op: "Add"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/keep_prob"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/Floor"
  op: "Floor"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/div"
  op: "RealDiv"
  input: "char_word_embeddings-mergeing_layer/sentence_words_concat"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "char_word_embeddings-mergeing_layer/dropout/dropout/mul"
  op: "Mul"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/div"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "projection/W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\240\000\000\000\013\000\000\000"
      }
    }
  }
}
node {
  name: "projection/W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1873171627521515
      }
    }
  }
}
node {
  name: "projection/W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1873171627521515
      }
    }
  }
}
node {
  name: "projection/W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "projection/W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "projection/W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "projection/W/Initializer/random_uniform/max"
  input: "projection/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "projection/W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "projection/W/Initializer/random_uniform/RandomUniform"
  input: "projection/W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "projection/W/Initializer/random_uniform"
  op: "Add"
  input: "projection/W/Initializer/random_uniform/mul"
  input: "projection/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "projection/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
        dim {
          size: 11
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "projection/W/Assign"
  op: "Assign"
  input: "projection/W"
  input: "projection/W/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "projection/W/read"
  op: "Identity"
  input: "projection/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "projection/b/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 11
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "projection/b"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 11
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "projection/b/Assign"
  op: "Assign"
  input: "projection/b"
  input: "projection/b/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "projection/b/read"
  op: "Identity"
  input: "projection/b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "projection/Shape"
  op: "Shape"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "projection/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "projection/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "projection/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "projection/strided_slice"
  op: "StridedSlice"
  input: "projection/Shape"
  input: "projection/strided_slice/stack"
  input: "projection/strided_slice/stack_1"
  input: "projection/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "projection/reshape_encoded_doc/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\240\000\000\000"
      }
    }
  }
}
node {
  name: "projection/reshape_encoded_doc"
  op: "Reshape"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/mul"
  input: "projection/reshape_encoded_doc/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "projection/MatMul"
  op: "MatMul"
  input: "projection/reshape_encoded_doc"
  input: "projection/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "projection/add"
  op: "Add"
  input: "projection/MatMul"
  input: "projection/b/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "projection/reshape_predictions/shape/0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "projection/reshape_predictions/shape/2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "projection/reshape_predictions/shape"
  op: "Pack"
  input: "projection/reshape_predictions/shape/0"
  input: "projection/strided_slice"
  input: "projection/reshape_predictions/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "projection/reshape_predictions"
  op: "Reshape"
  input: "projection/add"
  input: "projection/reshape_predictions/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/transitions/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\013\000\000\000\013\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/transitions/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5222329497337341
      }
    }
  }
}
node {
  name: "loss-layer/transitions/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5222329497337341
      }
    }
  }
}
node {
  name: "loss-layer/transitions/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "loss-layer/transitions/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/transitions/Initializer/random_uniform/sub"
  op: "Sub"
  input: "loss-layer/transitions/Initializer/random_uniform/max"
  input: "loss-layer/transitions/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/transitions/Initializer/random_uniform/mul"
  op: "Mul"
  input: "loss-layer/transitions/Initializer/random_uniform/RandomUniform"
  input: "loss-layer/transitions/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/transitions/Initializer/random_uniform"
  op: "Add"
  input: "loss-layer/transitions/Initializer/random_uniform/mul"
  input: "loss-layer/transitions/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/transitions"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 11
        }
        dim {
          size: 11
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "loss-layer/transitions/Assign"
  op: "Assign"
  input: "loss-layer/transitions"
  input: "loss-layer/transitions/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "loss-layer/transitions/read"
  op: "Identity"
  input: "loss-layer/transitions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Shape"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice"
  op: "StridedSlice"
  input: "loss-layer/Shape"
  input: "loss-layer/strided_slice/stack"
  input: "loss-layer/strided_slice/stack_1"
  input: "loss-layer/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/Shape_1"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_1"
  op: "StridedSlice"
  input: "loss-layer/Shape_1"
  input: "loss-layer/strided_slice_1/stack"
  input: "loss-layer/strided_slice_1/stack_1"
  input: "loss-layer/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/Shape_2"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_2"
  op: "StridedSlice"
  input: "loss-layer/Shape_2"
  input: "loss-layer/strided_slice_2/stack"
  input: "loss-layer/strided_slice_2/stack_1"
  input: "loss-layer/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/Reshape"
  op: "Reshape"
  input: "projection/reshape_predictions"
  input: "loss-layer/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/range"
  op: "Range"
  input: "loss-layer/range/start"
  input: "loss-layer/strided_slice"
  input: "loss-layer/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/mul"
  op: "Mul"
  input: "loss-layer/range"
  input: "loss-layer/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/mul_1"
  op: "Mul"
  input: "loss-layer/mul"
  input: "loss-layer/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims"
  op: "ExpandDims"
  input: "loss-layer/mul_1"
  input: "loss-layer/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/range_1/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/range_1/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/range_1"
  op: "Range"
  input: "loss-layer/range_1/start"
  input: "loss-layer/strided_slice_1"
  input: "loss-layer/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/mul_2"
  op: "Mul"
  input: "loss-layer/range_1"
  input: "loss-layer/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_1/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_1"
  op: "ExpandDims"
  input: "loss-layer/mul_2"
  input: "loss-layer/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/add"
  op: "Add"
  input: "loss-layer/ExpandDims"
  input: "loss-layer/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/add_1"
  op: "Add"
  input: "loss-layer/add"
  input: "ner-tags-2-ids/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Reshape_1/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/Reshape_1"
  op: "Reshape"
  input: "loss-layer/add_1"
  input: "loss-layer/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Gather"
  op: "Gather"
  input: "loss-layer/Reshape"
  input: "loss-layer/Reshape_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "loss-layer/Reshape_2/shape"
  op: "Pack"
  input: "loss-layer/strided_slice"
  input: "loss-layer/strided_slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/Reshape_2"
  op: "Reshape"
  input: "loss-layer/Gather"
  input: "loss-layer/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Shape_3"
  op: "Shape"
  input: "ner-tags-2-ids/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/strided_slice_3/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_3/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_3/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_3"
  op: "StridedSlice"
  input: "loss-layer/Shape_3"
  input: "loss-layer/strided_slice_3/stack"
  input: "loss-layer/strided_slice_3/stack_1"
  input: "loss-layer/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/range_2/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/range_2/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/range_2"
  op: "Range"
  input: "loss-layer/range_2/start"
  input: "loss-layer/strided_slice_3"
  input: "loss-layer/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_2/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_2"
  op: "ExpandDims"
  input: "loss-layer/range_2"
  input: "loss-layer/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Shape_4"
  op: "Shape"
  input: "word-embed-layer/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/strided_slice_4/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_4/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_4/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_4"
  op: "StridedSlice"
  input: "loss-layer/Shape_4"
  input: "loss-layer/strided_slice_4/stack"
  input: "loss-layer/strided_slice_4/stack_1"
  input: "loss-layer/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/Tile/multiples/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/Tile/multiples"
  op: "Pack"
  input: "loss-layer/strided_slice_4"
  input: "loss-layer/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/Tile"
  op: "Tile"
  input: "loss-layer/ExpandDims_2"
  input: "loss-layer/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_3/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_3"
  op: "ExpandDims"
  input: "word-embed-layer/Sum"
  input: "loss-layer/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ToInt64"
  op: "Cast"
  input: "loss-layer/Tile"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ToInt64_1"
  op: "Cast"
  input: "loss-layer/ExpandDims_3"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Less"
  op: "Less"
  input: "loss-layer/ToInt64"
  input: "loss-layer/ToInt64_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ToFloat"
  op: "Cast"
  input: "loss-layer/Less"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/mul_3"
  op: "Mul"
  input: "loss-layer/Reshape_2"
  input: "loss-layer/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/Sum"
  op: "Sum"
  input: "loss-layer/mul_3"
  input: "loss-layer/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/Shape_5"
  op: "Shape"
  input: "ner-tags-2-ids/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/strided_slice_5/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_5/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_5/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_5"
  op: "StridedSlice"
  input: "loss-layer/Shape_5"
  input: "loss-layer/strided_slice_5/stack"
  input: "loss-layer/strided_slice_5/stack_1"
  input: "loss-layer/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/sub/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/sub"
  op: "Sub"
  input: "loss-layer/strided_slice_5"
  input: "loss-layer/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/Slice/begin"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/Slice/size/0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/Slice/size"
  op: "Pack"
  input: "loss-layer/Slice/size/0"
  input: "loss-layer/sub"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/Slice"
  op: "Slice"
  input: "ner-tags-2-ids/Cast"
  input: "loss-layer/Slice/begin"
  input: "loss-layer/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Slice_1/begin"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/Slice_1/size/0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/Slice_1/size"
  op: "Pack"
  input: "loss-layer/Slice_1/size/0"
  input: "loss-layer/sub"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/Slice_1"
  op: "Slice"
  input: "ner-tags-2-ids/Cast"
  input: "loss-layer/Slice_1/begin"
  input: "loss-layer/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/mul_4/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "loss-layer/mul_4"
  op: "Mul"
  input: "loss-layer/Slice"
  input: "loss-layer/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/add_2"
  op: "Add"
  input: "loss-layer/mul_4"
  input: "loss-layer/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Reshape_3/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/Reshape_3"
  op: "Reshape"
  input: "loss-layer/transitions/read"
  input: "loss-layer/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 121
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Gather_1"
  op: "Gather"
  input: "loss-layer/Reshape_3"
  input: "loss-layer/add_2"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "loss-layer/Shape_6"
  op: "Shape"
  input: "ner-tags-2-ids/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/strided_slice_6/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_6/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_6/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_6"
  op: "StridedSlice"
  input: "loss-layer/Shape_6"
  input: "loss-layer/strided_slice_6/stack"
  input: "loss-layer/strided_slice_6/stack_1"
  input: "loss-layer/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/range_3/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/range_3/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/range_3"
  op: "Range"
  input: "loss-layer/range_3/start"
  input: "loss-layer/strided_slice_6"
  input: "loss-layer/range_3/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_4/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_4"
  op: "ExpandDims"
  input: "loss-layer/range_3"
  input: "loss-layer/ExpandDims_4/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Shape_7"
  op: "Shape"
  input: "word-embed-layer/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/strided_slice_7/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_7/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_7/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/strided_slice_7"
  op: "StridedSlice"
  input: "loss-layer/Shape_7"
  input: "loss-layer/strided_slice_7/stack"
  input: "loss-layer/strided_slice_7/stack_1"
  input: "loss-layer/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/Tile_1/multiples/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/Tile_1/multiples"
  op: "Pack"
  input: "loss-layer/strided_slice_7"
  input: "loss-layer/Tile_1/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/Tile_1"
  op: "Tile"
  input: "loss-layer/ExpandDims_4"
  input: "loss-layer/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_5/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_5"
  op: "ExpandDims"
  input: "word-embed-layer/Sum"
  input: "loss-layer/ExpandDims_5/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ToInt64_2"
  op: "Cast"
  input: "loss-layer/Tile_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ToInt64_3"
  op: "Cast"
  input: "loss-layer/ExpandDims_5"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Less_1"
  op: "Less"
  input: "loss-layer/ToInt64_2"
  input: "loss-layer/ToInt64_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ToFloat_1"
  op: "Cast"
  input: "loss-layer/Less_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Slice_2/begin"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/Slice_2/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "loss-layer/Slice_2"
  op: "Slice"
  input: "loss-layer/ToFloat_1"
  input: "loss-layer/Slice_2/begin"
  input: "loss-layer/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/mul_5"
  op: "Mul"
  input: "loss-layer/Gather_1"
  input: "loss-layer/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Sum_1/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/Sum_1"
  op: "Sum"
  input: "loss-layer/mul_5"
  input: "loss-layer/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/add_3"
  op: "Add"
  input: "loss-layer/Sum"
  input: "loss-layer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Slice_3/begin"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/Slice_3/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "loss-layer/Slice_3"
  op: "Slice"
  input: "projection/reshape_predictions"
  input: "loss-layer/Slice_3/begin"
  input: "loss-layer/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Squeeze"
  op: "Squeeze"
  input: "loss-layer/Slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "loss-layer/Slice_4/begin"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/Slice_4/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "loss-layer/Slice_4"
  op: "Slice"
  input: "projection/reshape_predictions"
  input: "loss-layer/Slice_4/begin"
  input: "loss-layer/Slice_4/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_6/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_6"
  op: "ExpandDims"
  input: "loss-layer/transitions/read"
  input: "loss-layer/ExpandDims_6/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/sub_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/sub_1"
  op: "Sub"
  input: "word-embed-layer/Sum"
  input: "loss-layer/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/range_4/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/range_4/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/range_4"
  op: "Range"
  input: "loss-layer/range_4/start"
  input: "loss-layer/Rank"
  input: "loss-layer/range_4/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/concat"
  op: "ConcatV2"
  input: "loss-layer/concat/values_0"
  input: "loss-layer/range_4"
  input: "loss-layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/transpose"
  op: "Transpose"
  input: "loss-layer/Slice_4"
  input: "loss-layer/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/sequence_length"
  op: "Identity"
  input: "loss-layer/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Shape"
  op: "Shape"
  input: "loss-layer/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice"
  op: "StridedSlice"
  input: "loss-layer/rnn/Shape"
  input: "loss-layer/rnn/strided_slice/stack"
  input: "loss-layer/rnn/strided_slice/stack_1"
  input: "loss-layer/rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn/Shape_1"
  op: "Shape"
  input: "loss-layer/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn/stack"
  op: "Pack"
  input: "loss-layer/rnn/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/rnn/Equal"
  op: "Equal"
  input: "loss-layer/rnn/Shape_1"
  input: "loss-layer/rnn/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/All"
  op: "All"
  input: "loss-layer/rnn/Equal"
  input: "loss-layer/rnn/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/rnn/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor loss-layer/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor loss-layer/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Assert/Assert"
  op: "Assert"
  input: "loss-layer/rnn/All"
  input: "loss-layer/rnn/Assert/Assert/data_0"
  input: "loss-layer/rnn/stack"
  input: "loss-layer/rnn/Assert/Assert/data_2"
  input: "loss-layer/rnn/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "loss-layer/rnn/CheckSeqLen"
  op: "Identity"
  input: "loss-layer/sequence_length"
  input: "^loss-layer/rnn/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Shape_2"
  op: "Shape"
  input: "loss-layer/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "loss-layer/rnn/Shape_2"
  input: "loss-layer/rnn/strided_slice_1/stack"
  input: "loss-layer/rnn/strided_slice_1/stack_1"
  input: "loss-layer/rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn/Shape_3"
  op: "Shape"
  input: "loss-layer/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "loss-layer/rnn/Shape_3"
  input: "loss-layer/rnn/strided_slice_2/stack"
  input: "loss-layer/rnn/strided_slice_2/stack_1"
  input: "loss-layer/rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/ExpandDims"
  op: "ExpandDims"
  input: "loss-layer/rnn/strided_slice_2"
  input: "loss-layer/rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "loss-layer/rnn/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/concat"
  op: "ConcatV2"
  input: "loss-layer/rnn/ExpandDims"
  input: "loss-layer/rnn/Const_1"
  input: "loss-layer/rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/zeros"
  op: "Fill"
  input: "loss-layer/rnn/concat"
  input: "loss-layer/rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Min"
  op: "Min"
  input: "loss-layer/rnn/CheckSeqLen"
  input: "loss-layer/rnn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/rnn/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Max"
  op: "Max"
  input: "loss-layer/rnn/CheckSeqLen"
  input: "loss-layer/rnn/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/rnn/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "loss-layer/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "loss-layer/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "loss-layer/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "loss-layer/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "loss-layer/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "loss-layer/rnn/TensorArrayUnstack/Shape"
  input: "loss-layer/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "loss-layer/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "loss-layer/rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "loss-layer/rnn/TensorArrayUnstack/range/start"
  input: "loss-layer/rnn/TensorArrayUnstack/strided_slice"
  input: "loss-layer/rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "loss-layer/rnn/TensorArray_1"
  input: "loss-layer/rnn/TensorArrayUnstack/range"
  input: "loss-layer/transpose"
  input: "loss-layer/rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Enter"
  op: "Enter"
  input: "loss-layer/rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn/while/Enter_1"
  op: "Enter"
  input: "loss-layer/rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn/while/Enter_2"
  op: "Enter"
  input: "loss-layer/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn/while/Merge"
  op: "Merge"
  input: "loss-layer/rnn/while/Enter"
  input: "loss-layer/rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Merge_1"
  op: "Merge"
  input: "loss-layer/rnn/while/Enter_1"
  input: "loss-layer/rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Merge_2"
  op: "Merge"
  input: "loss-layer/rnn/while/Enter_2"
  input: "loss-layer/rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Less/Enter"
  op: "Enter"
  input: "loss-layer/rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn/while/Less"
  op: "Less"
  input: "loss-layer/rnn/while/Merge"
  input: "loss-layer/rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/LoopCond"
  op: "LoopCond"
  input: "loss-layer/rnn/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Switch"
  op: "Switch"
  input: "loss-layer/rnn/while/Merge"
  input: "loss-layer/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Switch_1"
  op: "Switch"
  input: "loss-layer/rnn/while/Merge_1"
  input: "loss-layer/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Switch_2"
  op: "Switch"
  input: "loss-layer/rnn/while/Merge_2"
  input: "loss-layer/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Identity"
  op: "Identity"
  input: "loss-layer/rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Identity_1"
  op: "Identity"
  input: "loss-layer/rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Identity_2"
  op: "Identity"
  input: "loss-layer/rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "loss-layer/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "loss-layer/rnn/while/TensorArrayReadV3/Enter"
  input: "loss-layer/rnn/while/Identity"
  input: "loss-layer/rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss-layer/rnn/while/ExpandDims/dim"
  op: "Const"
  input: "^loss-layer/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ExpandDims"
  op: "ExpandDims"
  input: "loss-layer/rnn/while/Identity_2"
  input: "loss-layer/rnn/while/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/add/Enter"
  op: "Enter"
  input: "loss-layer/ExpandDims_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn/while/add"
  op: "Add"
  input: "loss-layer/rnn/while/ExpandDims"
  input: "loss-layer/rnn/while/add/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/Max/reduction_indices"
  op: "Const"
  input: "^loss-layer/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/Max"
  op: "Max"
  input: "loss-layer/rnn/while/add"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/IsFinite"
  op: "IsFinite"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/zeros_like"
  op: "ZerosLike"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/Select"
  op: "Select"
  input: "loss-layer/rnn/while/ReduceLogSumExp/IsFinite"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Max"
  input: "loss-layer/rnn/while/ReduceLogSumExp/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/StopGradient"
  op: "StopGradient"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/sub"
  op: "Sub"
  input: "loss-layer/rnn/while/add"
  input: "loss-layer/rnn/while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/Exp"
  op: "Exp"
  input: "loss-layer/rnn/while/ReduceLogSumExp/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/Sum/reduction_indices"
  op: "Const"
  input: "^loss-layer/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/Sum"
  op: "Sum"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Exp"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/Log"
  op: "Log"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/add"
  op: "Add"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Log"
  input: "loss-layer/rnn/while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/ReduceLogSumExp/Squeeze"
  op: "Squeeze"
  input: "loss-layer/rnn/while/ReduceLogSumExp/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/add_1"
  op: "Add"
  input: "loss-layer/rnn/while/TensorArrayReadV3"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/GreaterEqual/Enter"
  op: "Enter"
  input: "loss-layer/rnn/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn/while/GreaterEqual"
  op: "GreaterEqual"
  input: "loss-layer/rnn/while/Identity"
  input: "loss-layer/rnn/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Select/Enter"
  op: "Enter"
  input: "loss-layer/rnn/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn/while/Select"
  op: "Select"
  input: "loss-layer/rnn/while/GreaterEqual"
  input: "loss-layer/rnn/while/Select/Enter"
  input: "loss-layer/rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "loss-layer/rnn/while/Identity"
  input: "loss-layer/rnn/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Select_1"
  op: "Select"
  input: "loss-layer/rnn/while/GreaterEqual_1"
  input: "loss-layer/rnn/while/Identity_2"
  input: "loss-layer/rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "loss-layer/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "loss-layer/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "loss-layer/rnn/while/Identity"
  input: "loss-layer/rnn/while/Select"
  input: "loss-layer/rnn/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/add_2/y"
  op: "Const"
  input: "^loss-layer/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/add_2"
  op: "Add"
  input: "loss-layer/rnn/while/Identity"
  input: "loss-layer/rnn/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/NextIteration"
  op: "NextIteration"
  input: "loss-layer/rnn/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "loss-layer/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "loss-layer/rnn/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Exit"
  op: "Exit"
  input: "loss-layer/rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Exit_1"
  op: "Exit"
  input: "loss-layer/rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/while/Exit_2"
  op: "Exit"
  input: "loss-layer/rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "loss-layer/rnn/TensorArray"
  input: "loss-layer/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayStack/range"
  op: "Range"
  input: "loss-layer/rnn/TensorArrayStack/range/start"
  input: "loss-layer/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "loss-layer/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "loss-layer/rnn/TensorArray"
  input: "loss-layer/rnn/TensorArrayStack/range"
  input: "loss-layer/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 11
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "loss-layer/rnn/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/rnn/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/rnn/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn/range"
  op: "Range"
  input: "loss-layer/rnn/range/start"
  input: "loss-layer/rnn/Rank"
  input: "loss-layer/rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/rnn/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn/concat_1"
  op: "ConcatV2"
  input: "loss-layer/rnn/concat_1/values_0"
  input: "loss-layer/rnn/range"
  input: "loss-layer/rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn/transpose"
  op: "Transpose"
  input: "loss-layer/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "loss-layer/rnn/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/Max/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/Max"
  op: "Max"
  input: "loss-layer/rnn/while/Exit_2"
  input: "loss-layer/ReduceLogSumExp/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/IsFinite"
  op: "IsFinite"
  input: "loss-layer/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/zeros_like"
  op: "ZerosLike"
  input: "loss-layer/ReduceLogSumExp/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/Select"
  op: "Select"
  input: "loss-layer/ReduceLogSumExp/IsFinite"
  input: "loss-layer/ReduceLogSumExp/Max"
  input: "loss-layer/ReduceLogSumExp/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/StopGradient"
  op: "StopGradient"
  input: "loss-layer/ReduceLogSumExp/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/sub"
  op: "Sub"
  input: "loss-layer/rnn/while/Exit_2"
  input: "loss-layer/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/Exp"
  op: "Exp"
  input: "loss-layer/ReduceLogSumExp/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/Sum/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/Sum"
  op: "Sum"
  input: "loss-layer/ReduceLogSumExp/Exp"
  input: "loss-layer/ReduceLogSumExp/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/Log"
  op: "Log"
  input: "loss-layer/ReduceLogSumExp/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/add"
  op: "Add"
  input: "loss-layer/ReduceLogSumExp/Log"
  input: "loss-layer/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ReduceLogSumExp/Squeeze"
  op: "Squeeze"
  input: "loss-layer/ReduceLogSumExp/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "loss-layer/sub_2"
  op: "Sub"
  input: "loss-layer/add_3"
  input: "loss-layer/ReduceLogSumExp/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Neg"
  op: "Neg"
  input: "loss-layer/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/Mean"
  op: "Mean"
  input: "loss-layer/Neg"
  input: "loss-layer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/loss/tags"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss-layer/loss"
      }
    }
  }
}
node {
  name: "loss-layer/loss"
  op: "ScalarSummary"
  input: "loss-layer/loss/tags"
  input: "loss-layer/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_7/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_7"
  op: "ExpandDims"
  input: "loss-layer/transitions/read"
  input: "loss-layer/ExpandDims_7/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Slice_5/begin"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/Slice_5/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "loss-layer/Slice_5"
  op: "Slice"
  input: "projection/reshape_predictions"
  input: "loss-layer/Slice_5/begin"
  input: "loss-layer/Slice_5/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Squeeze_1"
  op: "Squeeze"
  input: "loss-layer/Slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "loss-layer/Slice_6/begin"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/Slice_6/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "loss-layer/Slice_6"
  op: "Slice"
  input: "projection/reshape_predictions"
  input: "loss-layer/Slice_6/begin"
  input: "loss-layer/Slice_6/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/sub_3/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/sub_3"
  op: "Sub"
  input: "word-embed-layer/Sum"
  input: "loss-layer/sub_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Rank_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/range_5/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/range_5/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/range_5"
  op: "Range"
  input: "loss-layer/range_5/start"
  input: "loss-layer/Rank_1"
  input: "loss-layer/range_5/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/concat_1"
  op: "ConcatV2"
  input: "loss-layer/concat_1/values_0"
  input: "loss-layer/range_5"
  input: "loss-layer/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/transpose_1"
  op: "Transpose"
  input: "loss-layer/Slice_6"
  input: "loss-layer/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/sequence_length_1"
  op: "Identity"
  input: "loss-layer/sub_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Shape"
  op: "Shape"
  input: "loss-layer/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice"
  op: "StridedSlice"
  input: "loss-layer/rnn_1/Shape"
  input: "loss-layer/rnn_1/strided_slice/stack"
  input: "loss-layer/rnn_1/strided_slice/stack_1"
  input: "loss-layer/rnn_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn_1/Shape_1"
  op: "Shape"
  input: "loss-layer/sequence_length_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_1/stack"
  op: "Pack"
  input: "loss-layer/rnn_1/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/rnn_1/Equal"
  op: "Equal"
  input: "loss-layer/rnn_1/Shape_1"
  input: "loss-layer/rnn_1/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/All"
  op: "All"
  input: "loss-layer/rnn_1/Equal"
  input: "loss-layer/rnn_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/rnn_1/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor loss-layer/sequence_length_1:0 is "
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor loss-layer/sequence_length_1:0 is "
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Assert/Assert"
  op: "Assert"
  input: "loss-layer/rnn_1/All"
  input: "loss-layer/rnn_1/Assert/Assert/data_0"
  input: "loss-layer/rnn_1/stack"
  input: "loss-layer/rnn_1/Assert/Assert/data_2"
  input: "loss-layer/rnn_1/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "loss-layer/rnn_1/CheckSeqLen"
  op: "Identity"
  input: "loss-layer/sequence_length_1"
  input: "^loss-layer/rnn_1/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Shape_2"
  op: "Shape"
  input: "loss-layer/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice_1"
  op: "StridedSlice"
  input: "loss-layer/rnn_1/Shape_2"
  input: "loss-layer/rnn_1/strided_slice_1/stack"
  input: "loss-layer/rnn_1/strided_slice_1/stack_1"
  input: "loss-layer/rnn_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn_1/Shape_3"
  op: "Shape"
  input: "loss-layer/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/strided_slice_2"
  op: "StridedSlice"
  input: "loss-layer/rnn_1/Shape_3"
  input: "loss-layer/rnn_1/strided_slice_2/stack"
  input: "loss-layer/rnn_1/strided_slice_2/stack_1"
  input: "loss-layer/rnn_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn_1/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/ExpandDims"
  op: "ExpandDims"
  input: "loss-layer/rnn_1/strided_slice_2"
  input: "loss-layer/rnn_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/concat"
  op: "ConcatV2"
  input: "loss-layer/rnn_1/ExpandDims"
  input: "loss-layer/rnn_1/Const_1"
  input: "loss-layer/rnn_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/zeros"
  op: "Fill"
  input: "loss-layer/rnn_1/concat"
  input: "loss-layer/rnn_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Min"
  op: "Min"
  input: "loss-layer/rnn_1/CheckSeqLen"
  input: "loss-layer/rnn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/rnn_1/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Max"
  op: "Max"
  input: "loss-layer/rnn_1/CheckSeqLen"
  input: "loss-layer/rnn_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/rnn_1/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArray"
  op: "TensorArrayV3"
  input: "loss-layer/rnn_1/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "loss-layer/rnn_1/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "loss-layer/rnn_1/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "loss-layer/rnn_1/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "loss-layer/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "loss-layer/rnn_1/TensorArrayUnstack/Shape"
  input: "loss-layer/rnn_1/TensorArrayUnstack/strided_slice/stack"
  input: "loss-layer/rnn_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "loss-layer/rnn_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayUnstack/range"
  op: "Range"
  input: "loss-layer/rnn_1/TensorArrayUnstack/range/start"
  input: "loss-layer/rnn_1/TensorArrayUnstack/strided_slice"
  input: "loss-layer/rnn_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "loss-layer/rnn_1/TensorArray_1"
  input: "loss-layer/rnn_1/TensorArrayUnstack/range"
  input: "loss-layer/transpose_1"
  input: "loss-layer/rnn_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transpose_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Enter"
  op: "Enter"
  input: "loss-layer/rnn_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Enter_1"
  op: "Enter"
  input: "loss-layer/rnn_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Enter_2"
  op: "Enter"
  input: "loss-layer/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Merge"
  op: "Merge"
  input: "loss-layer/rnn_1/while/Enter"
  input: "loss-layer/rnn_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Merge_1"
  op: "Merge"
  input: "loss-layer/rnn_1/while/Enter_1"
  input: "loss-layer/rnn_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Merge_2"
  op: "Merge"
  input: "loss-layer/rnn_1/while/Enter_2"
  input: "loss-layer/rnn_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Less/Enter"
  op: "Enter"
  input: "loss-layer/rnn_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Less"
  op: "Less"
  input: "loss-layer/rnn_1/while/Merge"
  input: "loss-layer/rnn_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/LoopCond"
  op: "LoopCond"
  input: "loss-layer/rnn_1/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Switch"
  op: "Switch"
  input: "loss-layer/rnn_1/while/Merge"
  input: "loss-layer/rnn_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Switch_1"
  op: "Switch"
  input: "loss-layer/rnn_1/while/Merge_1"
  input: "loss-layer/rnn_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Switch_2"
  op: "Switch"
  input: "loss-layer/rnn_1/while/Merge_2"
  input: "loss-layer/rnn_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Identity"
  op: "Identity"
  input: "loss-layer/rnn_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Identity_1"
  op: "Identity"
  input: "loss-layer/rnn_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Identity_2"
  op: "Identity"
  input: "loss-layer/rnn_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "loss-layer/rnn_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "loss-layer/rnn_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "loss-layer/rnn_1/while/TensorArrayReadV3/Enter"
  input: "loss-layer/rnn_1/while/Identity"
  input: "loss-layer/rnn_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/ExpandDims/dim"
  op: "Const"
  input: "^loss-layer/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/ExpandDims"
  op: "ExpandDims"
  input: "loss-layer/rnn_1/while/Identity_2"
  input: "loss-layer/rnn_1/while/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/add/Enter"
  op: "Enter"
  input: "loss-layer/ExpandDims_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/add"
  op: "Add"
  input: "loss-layer/rnn_1/while/ExpandDims"
  input: "loss-layer/rnn_1/while/add/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Max/reduction_indices"
  op: "Const"
  input: "^loss-layer/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Max"
  op: "Max"
  input: "loss-layer/rnn_1/while/add"
  input: "loss-layer/rnn_1/while/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/add_1"
  op: "Add"
  input: "loss-layer/rnn_1/while/TensorArrayReadV3"
  input: "loss-layer/rnn_1/while/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/ArgMax/dimension"
  op: "Const"
  input: "^loss-layer/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/ArgMax"
  op: "ArgMax"
  input: "loss-layer/rnn_1/while/add"
  input: "loss-layer/rnn_1/while/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Cast"
  op: "Cast"
  input: "loss-layer/rnn_1/while/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/GreaterEqual/Enter"
  op: "Enter"
  input: "loss-layer/rnn_1/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/GreaterEqual"
  op: "GreaterEqual"
  input: "loss-layer/rnn_1/while/Identity"
  input: "loss-layer/rnn_1/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Select/Enter"
  op: "Enter"
  input: "loss-layer/rnn_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Select"
  op: "Select"
  input: "loss-layer/rnn_1/while/GreaterEqual"
  input: "loss-layer/rnn_1/while/Select/Enter"
  input: "loss-layer/rnn_1/while/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "loss-layer/rnn_1/while/Identity"
  input: "loss-layer/rnn_1/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Select_1"
  op: "Select"
  input: "loss-layer/rnn_1/while/GreaterEqual_1"
  input: "loss-layer/rnn_1/while/Identity_2"
  input: "loss-layer/rnn_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "loss-layer/rnn_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "loss-layer/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "loss-layer/rnn_1/while/Identity"
  input: "loss-layer/rnn_1/while/Select"
  input: "loss-layer/rnn_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/while/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/add_2/y"
  op: "Const"
  input: "^loss-layer/rnn_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/add_2"
  op: "Add"
  input: "loss-layer/rnn_1/while/Identity"
  input: "loss-layer/rnn_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/NextIteration"
  op: "NextIteration"
  input: "loss-layer/rnn_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/NextIteration_1"
  op: "NextIteration"
  input: "loss-layer/rnn_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/NextIteration_2"
  op: "NextIteration"
  input: "loss-layer/rnn_1/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Exit"
  op: "Exit"
  input: "loss-layer/rnn_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Exit_1"
  op: "Exit"
  input: "loss-layer/rnn_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/while/Exit_2"
  op: "Exit"
  input: "loss-layer/rnn_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "loss-layer/rnn_1/TensorArray"
  input: "loss-layer/rnn_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayStack/range"
  op: "Range"
  input: "loss-layer/rnn_1/TensorArrayStack/range/start"
  input: "loss-layer/rnn_1/TensorArrayStack/TensorArraySizeV3"
  input: "loss-layer/rnn_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "loss-layer/rnn_1/TensorArray"
  input: "loss-layer/rnn_1/TensorArrayStack/range"
  input: "loss-layer/rnn_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 11
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/range"
  op: "Range"
  input: "loss-layer/rnn_1/range/start"
  input: "loss-layer/rnn_1/Rank"
  input: "loss-layer/rnn_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/concat_1"
  op: "ConcatV2"
  input: "loss-layer/rnn_1/concat_1/values_0"
  input: "loss-layer/rnn_1/range"
  input: "loss-layer/rnn_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_1/transpose"
  op: "Transpose"
  input: "loss-layer/rnn_1/TensorArrayStack/TensorArrayGatherV3"
  input: "loss-layer/rnn_1/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/sub_4/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/sub_4"
  op: "Sub"
  input: "word-embed-layer/Sum"
  input: "loss-layer/sub_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ReverseSequence"
  op: "ReverseSequence"
  input: "loss-layer/rnn_1/transpose"
  input: "loss-layer/sub_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/ArgMax/dimension"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/ArgMax"
  op: "ArgMax"
  input: "loss-layer/rnn_1/while/Exit_2"
  input: "loss-layer/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss-layer/Cast"
  op: "Cast"
  input: "loss-layer/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_8/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/ExpandDims_8"
  op: "ExpandDims"
  input: "loss-layer/Cast"
  input: "loss-layer/ExpandDims_8/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/sub_5/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/sub_5"
  op: "Sub"
  input: "word-embed-layer/Sum"
  input: "loss-layer/sub_5/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Rank_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/range_6/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/range_6/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/range_6"
  op: "Range"
  input: "loss-layer/range_6/start"
  input: "loss-layer/Rank_2"
  input: "loss-layer/range_6/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/concat_2/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/concat_2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/concat_2"
  op: "ConcatV2"
  input: "loss-layer/concat_2/values_0"
  input: "loss-layer/range_6"
  input: "loss-layer/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/transpose_2"
  op: "Transpose"
  input: "loss-layer/ReverseSequence"
  input: "loss-layer/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/sequence_length_2"
  op: "Identity"
  input: "loss-layer/sub_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Shape"
  op: "Shape"
  input: "loss-layer/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice"
  op: "StridedSlice"
  input: "loss-layer/rnn_2/Shape"
  input: "loss-layer/rnn_2/strided_slice/stack"
  input: "loss-layer/rnn_2/strided_slice/stack_1"
  input: "loss-layer/rnn_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn_2/Shape_1"
  op: "Shape"
  input: "loss-layer/sequence_length_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_2/stack"
  op: "Pack"
  input: "loss-layer/rnn_2/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/rnn_2/Equal"
  op: "Equal"
  input: "loss-layer/rnn_2/Shape_1"
  input: "loss-layer/rnn_2/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/All"
  op: "All"
  input: "loss-layer/rnn_2/Equal"
  input: "loss-layer/rnn_2/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/rnn_2/Assert/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor loss-layer/sequence_length_2:0 is "
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Assert/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Assert/Assert/data_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor loss-layer/sequence_length_2:0 is "
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Assert/Assert/data_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Assert/Assert"
  op: "Assert"
  input: "loss-layer/rnn_2/All"
  input: "loss-layer/rnn_2/Assert/Assert/data_0"
  input: "loss-layer/rnn_2/stack"
  input: "loss-layer/rnn_2/Assert/Assert/data_2"
  input: "loss-layer/rnn_2/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "loss-layer/rnn_2/CheckSeqLen"
  op: "Identity"
  input: "loss-layer/sequence_length_2"
  input: "^loss-layer/rnn_2/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Shape_2"
  op: "Shape"
  input: "loss-layer/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice_1"
  op: "StridedSlice"
  input: "loss-layer/rnn_2/Shape_2"
  input: "loss-layer/rnn_2/strided_slice_1/stack"
  input: "loss-layer/rnn_2/strided_slice_1/stack_1"
  input: "loss-layer/rnn_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn_2/Shape_3"
  op: "Shape"
  input: "loss-layer/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice_2/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice_2/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice_2/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/strided_slice_2"
  op: "StridedSlice"
  input: "loss-layer/rnn_2/Shape_3"
  input: "loss-layer/rnn_2/strided_slice_2/stack"
  input: "loss-layer/rnn_2/strided_slice_2/stack_1"
  input: "loss-layer/rnn_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn_2/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/ExpandDims"
  op: "ExpandDims"
  input: "loss-layer/rnn_2/strided_slice_2"
  input: "loss-layer/rnn_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/concat"
  op: "ConcatV2"
  input: "loss-layer/rnn_2/ExpandDims"
  input: "loss-layer/rnn_2/Const_1"
  input: "loss-layer/rnn_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/zeros"
  op: "Fill"
  input: "loss-layer/rnn_2/concat"
  input: "loss-layer/rnn_2/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Min"
  op: "Min"
  input: "loss-layer/rnn_2/CheckSeqLen"
  input: "loss-layer/rnn_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/rnn_2/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Max"
  op: "Max"
  input: "loss-layer/rnn_2/CheckSeqLen"
  input: "loss-layer/rnn_2/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/rnn_2/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArray"
  op: "TensorArrayV3"
  input: "loss-layer/rnn_2/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "loss-layer/rnn_2/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArray_1"
  op: "TensorArrayV3"
  input: "loss-layer/rnn_2/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "loss-layer/rnn_2/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "loss-layer/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "loss-layer/rnn_2/TensorArrayUnstack/Shape"
  input: "loss-layer/rnn_2/TensorArrayUnstack/strided_slice/stack"
  input: "loss-layer/rnn_2/TensorArrayUnstack/strided_slice/stack_1"
  input: "loss-layer/rnn_2/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayUnstack/range"
  op: "Range"
  input: "loss-layer/rnn_2/TensorArrayUnstack/range/start"
  input: "loss-layer/rnn_2/TensorArrayUnstack/strided_slice"
  input: "loss-layer/rnn_2/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "loss-layer/rnn_2/TensorArray_1"
  input: "loss-layer/rnn_2/TensorArrayUnstack/range"
  input: "loss-layer/transpose_2"
  input: "loss-layer/rnn_2/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transpose_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Enter"
  op: "Enter"
  input: "loss-layer/rnn_2/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Enter_1"
  op: "Enter"
  input: "loss-layer/rnn_2/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Enter_2"
  op: "Enter"
  input: "loss-layer/ExpandDims_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Merge"
  op: "Merge"
  input: "loss-layer/rnn_2/while/Enter"
  input: "loss-layer/rnn_2/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Merge_1"
  op: "Merge"
  input: "loss-layer/rnn_2/while/Enter_1"
  input: "loss-layer/rnn_2/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Merge_2"
  op: "Merge"
  input: "loss-layer/rnn_2/while/Enter_2"
  input: "loss-layer/rnn_2/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Less/Enter"
  op: "Enter"
  input: "loss-layer/rnn_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Less"
  op: "Less"
  input: "loss-layer/rnn_2/while/Merge"
  input: "loss-layer/rnn_2/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/LoopCond"
  op: "LoopCond"
  input: "loss-layer/rnn_2/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Switch"
  op: "Switch"
  input: "loss-layer/rnn_2/while/Merge"
  input: "loss-layer/rnn_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Switch_1"
  op: "Switch"
  input: "loss-layer/rnn_2/while/Merge_1"
  input: "loss-layer/rnn_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Switch_2"
  op: "Switch"
  input: "loss-layer/rnn_2/while/Merge_2"
  input: "loss-layer/rnn_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Identity"
  op: "Identity"
  input: "loss-layer/rnn_2/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Identity_1"
  op: "Identity"
  input: "loss-layer/rnn_2/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Identity_2"
  op: "Identity"
  input: "loss-layer/rnn_2/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "loss-layer/rnn_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "loss-layer/rnn_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "loss-layer/rnn_2/while/TensorArrayReadV3/Enter"
  input: "loss-layer/rnn_2/while/Identity"
  input: "loss-layer/rnn_2/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Squeeze"
  op: "Squeeze"
  input: "loss-layer/rnn_2/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Shape"
  op: "Shape"
  input: "loss-layer/rnn_2/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/strided_slice/stack"
  op: "Const"
  input: "^loss-layer/rnn_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/strided_slice/stack_1"
  op: "Const"
  input: "^loss-layer/rnn_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/strided_slice/stack_2"
  op: "Const"
  input: "^loss-layer/rnn_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/strided_slice"
  op: "StridedSlice"
  input: "loss-layer/rnn_2/while/Shape"
  input: "loss-layer/rnn_2/while/strided_slice/stack"
  input: "loss-layer/rnn_2/while/strided_slice/stack_1"
  input: "loss-layer/rnn_2/while/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/range/start"
  op: "Const"
  input: "^loss-layer/rnn_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/range/delta"
  op: "Const"
  input: "^loss-layer/rnn_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/range"
  op: "Range"
  input: "loss-layer/rnn_2/while/range/start"
  input: "loss-layer/rnn_2/while/strided_slice"
  input: "loss-layer/rnn_2/while/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/stack"
  op: "Pack"
  input: "loss-layer/rnn_2/while/range"
  input: "loss-layer/rnn_2/while/Squeeze"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/GatherNd"
  op: "GatherNd"
  input: "loss-layer/rnn_2/while/TensorArrayReadV3"
  input: "loss-layer/rnn_2/while/stack"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/ExpandDims/dim"
  op: "Const"
  input: "^loss-layer/rnn_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/ExpandDims"
  op: "ExpandDims"
  input: "loss-layer/rnn_2/while/GatherNd"
  input: "loss-layer/rnn_2/while/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/GreaterEqual/Enter"
  op: "Enter"
  input: "loss-layer/rnn_2/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/GreaterEqual"
  op: "GreaterEqual"
  input: "loss-layer/rnn_2/while/Identity"
  input: "loss-layer/rnn_2/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Select/Enter"
  op: "Enter"
  input: "loss-layer/rnn_2/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Select"
  op: "Select"
  input: "loss-layer/rnn_2/while/GreaterEqual"
  input: "loss-layer/rnn_2/while/Select/Enter"
  input: "loss-layer/rnn_2/while/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "loss-layer/rnn_2/while/Identity"
  input: "loss-layer/rnn_2/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Select_1"
  op: "Select"
  input: "loss-layer/rnn_2/while/GreaterEqual_1"
  input: "loss-layer/rnn_2/while/Identity_2"
  input: "loss-layer/rnn_2/while/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "loss-layer/rnn_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "loss-layer/rnn_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "loss-layer/rnn_2/while/Identity"
  input: "loss-layer/rnn_2/while/Select"
  input: "loss-layer/rnn_2/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/while/ExpandDims"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/add/y"
  op: "Const"
  input: "^loss-layer/rnn_2/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/add"
  op: "Add"
  input: "loss-layer/rnn_2/while/Identity"
  input: "loss-layer/rnn_2/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/NextIteration"
  op: "NextIteration"
  input: "loss-layer/rnn_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/NextIteration_1"
  op: "NextIteration"
  input: "loss-layer/rnn_2/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/NextIteration_2"
  op: "NextIteration"
  input: "loss-layer/rnn_2/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Exit"
  op: "Exit"
  input: "loss-layer/rnn_2/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Exit_1"
  op: "Exit"
  input: "loss-layer/rnn_2/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/while/Exit_2"
  op: "Exit"
  input: "loss-layer/rnn_2/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "loss-layer/rnn_2/TensorArray"
  input: "loss-layer/rnn_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayStack/range"
  op: "Range"
  input: "loss-layer/rnn_2/TensorArrayStack/range/start"
  input: "loss-layer/rnn_2/TensorArrayStack/TensorArraySizeV3"
  input: "loss-layer/rnn_2/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "loss-layer/rnn_2/TensorArray"
  input: "loss-layer/rnn_2/TensorArrayStack/range"
  input: "loss-layer/rnn_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn_2/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/range"
  op: "Range"
  input: "loss-layer/rnn_2/range/start"
  input: "loss-layer/rnn_2/Rank"
  input: "loss-layer/rnn_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/concat_1"
  op: "ConcatV2"
  input: "loss-layer/rnn_2/concat_1/values_0"
  input: "loss-layer/rnn_2/range"
  input: "loss-layer/rnn_2/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/rnn_2/transpose"
  op: "Transpose"
  input: "loss-layer/rnn_2/TensorArrayStack/TensorArrayGatherV3"
  input: "loss-layer/rnn_2/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Squeeze_2"
  op: "Squeeze"
  input: "loss-layer/rnn_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "loss-layer/concat_3/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/concat_3"
  op: "ConcatV2"
  input: "loss-layer/ExpandDims_8"
  input: "loss-layer/Squeeze_2"
  input: "loss-layer/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/ReverseSequence_1"
  op: "ReverseSequence"
  input: "loss-layer/concat_3"
  input: "word-embed-layer/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "loss-layer/Max/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/Max"
  op: "Max"
  input: "loss-layer/rnn_1/while/Exit_2"
  input: "loss-layer/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/ArgMax_1/dimension"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/ArgMax_1"
  op: "ArgMax"
  input: "projection/reshape_predictions"
  input: "loss-layer/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss-layer/Cast_1"
  op: "Cast"
  input: "loss-layer/ArgMax_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Shape_8"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/Rank_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/Shape_9"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/Sub/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/Sub"
  op: "Sub"
  input: "loss-layer/Rank_3"
  input: "loss-layer/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/Slice_7/begin"
  op: "Pack"
  input: "loss-layer/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/Slice_7/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/Slice_7"
  op: "Slice"
  input: "loss-layer/Shape_9"
  input: "loss-layer/Slice_7/begin"
  input: "loss-layer/Slice_7/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/concat_4/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/concat_4/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/concat_4"
  op: "ConcatV2"
  input: "loss-layer/concat_4/values_0"
  input: "loss-layer/Slice_7"
  input: "loss-layer/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Reshape_4"
  op: "Reshape"
  input: "projection/reshape_predictions"
  input: "loss-layer/concat_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Softmax"
  op: "Softmax"
  input: "loss-layer/Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Reshape_5"
  op: "Reshape"
  input: "loss-layer/Softmax"
  input: "loss-layer/Shape_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Max_1/reduction_indices"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/Max_1"
  op: "Max"
  input: "loss-layer/Reshape_5"
  input: "loss-layer/Max_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss-layer/Shape_10"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/Rank_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/Shape_11"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/Sub_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/Sub_1"
  op: "Sub"
  input: "loss-layer/Rank_4"
  input: "loss-layer/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/Slice_8/begin"
  op: "Pack"
  input: "loss-layer/Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/Slice_8/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/Slice_8"
  op: "Slice"
  input: "loss-layer/Shape_11"
  input: "loss-layer/Slice_8/begin"
  input: "loss-layer/Slice_8/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/concat_5/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/concat_5/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/concat_5"
  op: "ConcatV2"
  input: "loss-layer/concat_5/values_0"
  input: "loss-layer/Slice_8"
  input: "loss-layer/concat_5/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Reshape_6"
  op: "Reshape"
  input: "projection/reshape_predictions"
  input: "loss-layer/concat_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Softmax_1"
  op: "Softmax"
  input: "loss-layer/Reshape_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Reshape_7"
  op: "Reshape"
  input: "loss-layer/Softmax_1"
  input: "loss-layer/Shape_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/TopKV2/k"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/TopKV2"
  op: "TopKV2"
  input: "loss-layer/Reshape_7"
  input: "loss-layer/TopKV2/k"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "sorted"
    value {
      b: true
    }
  }
}
node {
  name: "loss-layer/Shape_12"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/Rank_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/Shape_13"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss-layer/Sub_2/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/Sub_2"
  op: "Sub"
  input: "loss-layer/Rank_5"
  input: "loss-layer/Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss-layer/Slice_9/begin"
  op: "Pack"
  input: "loss-layer/Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss-layer/Slice_9/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss-layer/Slice_9"
  op: "Slice"
  input: "loss-layer/Shape_13"
  input: "loss-layer/Slice_9/begin"
  input: "loss-layer/Slice_9/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/concat_6/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss-layer/concat_6/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss-layer/concat_6"
  op: "ConcatV2"
  input: "loss-layer/concat_6/values_0"
  input: "loss-layer/Slice_9"
  input: "loss-layer/concat_6/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Reshape_8"
  op: "Reshape"
  input: "projection/reshape_predictions"
  input: "loss-layer/concat_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Softmax_2"
  op: "Softmax"
  input: "loss-layer/Reshape_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/Reshape_9"
  op: "Reshape"
  input: "loss-layer/Softmax_2"
  input: "loss-layer/Shape_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "loss-layer/TopKV2_1/k"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss-layer/TopKV2_1"
  op: "TopKV2"
  input: "loss-layer/Reshape_9"
  input: "loss-layer/TopKV2_1/k"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "sorted"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate/Assign"
  op: "Assign"
  input: "OptimizeLoss/learning_rate"
  input: "OptimizeLoss/learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate/read"
  op: "Identity"
  input: "OptimizeLoss/learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Fill"
  op: "Fill"
  input: "OptimizeLoss/gradients/Shape"
  input: "OptimizeLoss/gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge"
  op: "Merge"
  input: "OptimizeLoss/gradients/f_count_1"
  input: "OptimizeLoss/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge"
  input: "loss-layer/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add/y"
  op: "Const"
  input: "^loss-layer/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/Switch:1"
  input: "OptimizeLoss/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Add"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/StackPushV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPushV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPushV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_2"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_1"
  op: "Merge"
  input: "OptimizeLoss/gradients/b_count_1"
  input: "OptimizeLoss/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "OptimizeLoss/gradients/Merge_1"
  input: "OptimizeLoss/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_2"
  op: "LoopCond"
  input: "OptimizeLoss/gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_1"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_1"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sub"
  op: "Sub"
  input: "OptimizeLoss/gradients/Switch_1:1"
  input: "OptimizeLoss/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_1"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Sub"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_4"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/f_count_4"
  input: "OptimizeLoss/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_2"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_2"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add_1/y"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add_1"
  op: "Add"
  input: "OptimizeLoss/gradients/Switch_2:1"
  input: "OptimizeLoss/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_2"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Add_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_5"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_5"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_3"
  op: "Merge"
  input: "OptimizeLoss/gradients/b_count_5"
  input: "OptimizeLoss/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "OptimizeLoss/gradients/Merge_3"
  input: "OptimizeLoss/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_6"
  op: "LoopCond"
  input: "OptimizeLoss/gradients/GreaterEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_3"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_3"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sub_1"
  op: "Sub"
  input: "OptimizeLoss/gradients/Switch_3:1"
  input: "OptimizeLoss/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_3"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Sub_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_7"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_7"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_4"
  op: "Merge"
  input: "OptimizeLoss/gradients/f_count_7"
  input: "OptimizeLoss/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_4"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_4"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add_2/y"
  op: "Const"
  input: "^chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add_2"
  op: "Add"
  input: "OptimizeLoss/gradients/Switch_4:1"
  input: "OptimizeLoss/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_4"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Add_2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/StackPushV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_8"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_8"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_9"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_5"
  op: "Merge"
  input: "OptimizeLoss/gradients/b_count_9"
  input: "OptimizeLoss/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "OptimizeLoss/gradients/Merge_5"
  input: "OptimizeLoss/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_10"
  op: "LoopCond"
  input: "OptimizeLoss/gradients/GreaterEqual_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_5"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_5"
  input: "OptimizeLoss/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sub_2"
  op: "Sub"
  input: "OptimizeLoss/gradients/Switch_5:1"
  input: "OptimizeLoss/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_5"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Sub_2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_11"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_9"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_10"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_6"
  op: "Merge"
  input: "OptimizeLoss/gradients/f_count_10"
  input: "OptimizeLoss/gradients/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_6"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_6"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add_3/y"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add_3"
  op: "Add"
  input: "OptimizeLoss/gradients/Switch_6:1"
  input: "OptimizeLoss/gradients/Add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_6"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Add_3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_11"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_12"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_13"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_7"
  op: "Merge"
  input: "OptimizeLoss/gradients/b_count_13"
  input: "OptimizeLoss/gradients/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual_3/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/b_count_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual_3"
  op: "GreaterEqual"
  input: "OptimizeLoss/gradients/Merge_7"
  input: "OptimizeLoss/gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_14"
  op: "LoopCond"
  input: "OptimizeLoss/gradients/GreaterEqual_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_7"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_7"
  input: "OptimizeLoss/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sub_3"
  op: "Sub"
  input: "OptimizeLoss/gradients/Switch_7:1"
  input: "OptimizeLoss/gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_7"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Sub_3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_15"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_12"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_13"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_8"
  op: "Merge"
  input: "OptimizeLoss/gradients/f_count_13"
  input: "OptimizeLoss/gradients/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_8"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_8"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add_4/y"
  op: "Const"
  input: "^word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add_4"
  op: "Add"
  input: "OptimizeLoss/gradients/Switch_8:1"
  input: "OptimizeLoss/gradients/Add_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_8"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Add_4"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_14"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_16"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_17"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_9"
  op: "Merge"
  input: "OptimizeLoss/gradients/b_count_17"
  input: "OptimizeLoss/gradients/NextIteration_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual_4/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/b_count_16"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual_4"
  op: "GreaterEqual"
  input: "OptimizeLoss/gradients/Merge_9"
  input: "OptimizeLoss/gradients/GreaterEqual_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_18"
  op: "LoopCond"
  input: "OptimizeLoss/gradients/GreaterEqual_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_9"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_9"
  input: "OptimizeLoss/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sub_4"
  op: "Sub"
  input: "OptimizeLoss/gradients/Switch_9:1"
  input: "OptimizeLoss/gradients/GreaterEqual_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_9"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Sub_4"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_19"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Fill"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Shape"
  op: "Shape"
  input: "loss-layer/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Tile"
  op: "Tile"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Shape_1"
  op: "Shape"
  input: "loss-layer/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Shape_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Prod"
  op: "Prod"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Shape_1"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Prod_1"
  op: "Prod"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Shape_2"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Maximum/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Maximum"
  op: "Maximum"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Prod_1"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Prod"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/Cast"
  op: "Cast"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Mean_grad/truediv"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Tile"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Neg_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/loss-layer/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Shape"
  op: "Shape"
  input: "loss-layer/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Shape_1"
  op: "Shape"
  input: "loss-layer/ReduceLogSumExp/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/sub_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/Neg_grad/Neg"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Sum"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/Neg_grad/Neg"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Neg"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/sub_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/loss-layer/sub_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/sub_2_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/sub_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/sub_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/sub_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/loss-layer/sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/sub_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/add_3_grad/Shape"
  op: "Shape"
  input: "loss-layer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/add_3_grad/Shape_1"
  op: "Shape"
  input: "loss-layer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/add_3_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/add_3_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/Sum"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/add_3_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/Sum_1"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/loss-layer/add_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/add_3_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/add_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/loss-layer/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Squeeze_grad/Shape"
  op: "Shape"
  input: "loss-layer/ReduceLogSumExp/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/sub_2_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
  op: "Shape"
  input: "loss-layer/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/Size"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/add"
  op: "Add"
  input: "loss-layer/Sum/reduction_indices"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/add"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/range"
  op: "Range"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/range/start"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Size"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/Fill/value"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/Fill"
  op: "Fill"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Shape_1"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/range"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/mod"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/Maximum/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/Maximum"
  op: "Maximum"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/DynamicStitch"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_grad/Tile"
  op: "Tile"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss-layer/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Size"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/add"
  op: "Add"
  input: "loss-layer/Sum_1/reduction_indices"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/add"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/range"
  op: "Range"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/range/start"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Size"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Fill/value"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Fill"
  op: "Fill"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape_1"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/range"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/mod"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Maximum/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/DynamicStitch"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/add_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Tile"
  op: "Tile"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Shape"
  op: "Shape"
  input: "loss-layer/ReduceLogSumExp/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Shape_1"
  op: "Shape"
  input: "loss-layer/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Squeeze_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Sum"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Squeeze_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Shape"
  op: "Shape"
  input: "loss-layer/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Shape_1"
  op: "Shape"
  input: "loss-layer/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Tile"
  input: "loss-layer/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/mul"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Sum"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/mul_1"
  op: "Mul"
  input: "loss-layer/Reshape_2"
  input: "OptimizeLoss/gradients/loss-layer/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/mul_1"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Sum_1"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/loss-layer/mul_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/mul_3_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/mul_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/loss-layer/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/mul_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Shape"
  op: "Shape"
  input: "loss-layer/Gather_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Shape_1"
  op: "Shape"
  input: "loss-layer/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Tile"
  input: "loss-layer/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/mul"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Sum"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/mul_1"
  op: "Mul"
  input: "loss-layer/Gather_1"
  input: "OptimizeLoss/gradients/loss-layer/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/mul_1"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Sum_1"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/loss-layer/mul_5_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/mul_5_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/mul_5_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/mul_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/loss-layer/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/mul_5_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss-layer/ReduceLogSumExp/Sum"
  input: "^OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Log_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_2_grad/Shape"
  op: "Shape"
  input: "loss-layer/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/mul_3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/Reshape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 121
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/ToInt32"
  op: "Cast"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/Reshape_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/Size"
  op: "Size"
  input: "loss-layer/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/ExpandDims"
  op: "ExpandDims"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/Size"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/strided_slice"
  op: "StridedSlice"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/ToInt32"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/strided_slice/stack"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/strided_slice/stack_1"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/ExpandDims"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/strided_slice"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/mul_5_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/Reshape_1"
  op: "Reshape"
  input: "loss-layer/add_2"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
  op: "Shape"
  input: "loss-layer/ReduceLogSumExp/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Size"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/add"
  op: "Add"
  input: "loss-layer/ReduceLogSumExp/Sum/reduction_indices"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/add"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/range"
  op: "Range"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/range/start"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Size"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Fill/value"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Fill"
  op: "Fill"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape_1"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/range"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/mod"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Maximum/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Maximum"
  op: "Maximum"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/DynamicStitch"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Log_grad/mul"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Tile"
  op: "Tile"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/Shape"
  op: "Shape"
  input: "loss-layer/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/ToInt32"
  op: "Cast"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/Size"
  op: "Size"
  input: "loss-layer/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/ExpandDims"
  op: "ExpandDims"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/Size"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/strided_slice"
  op: "StridedSlice"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/ToInt32"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/strided_slice/stack"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/strided_slice/stack_1"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/ExpandDims"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/strided_slice"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_2_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Gather_grad/Reshape_1"
  op: "Reshape"
  input: "loss-layer/Reshape_1"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\013\000\000\000\013\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape/strided_slice"
  op: "StridedSlice"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/ToInt32"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape/strided_slice/stack"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape/strided_slice/stack_1"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape/tensor"
  op: "UnsortedSegmentSum"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Gather_1_grad/Reshape_1"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape/tensor"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Exp_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Sum_grad/Tile"
  input: "loss-layer/ReduceLogSumExp/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Shape"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape/strided_slice"
  op: "StridedSlice"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/ToInt32"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape/strided_slice/stack"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape/strided_slice/stack_1"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape/tensor"
  op: "UnsortedSegmentSum"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Gather_grad/Reshape_1"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape/tensor"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Shape"
  op: "Shape"
  input: "loss-layer/rnn/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Shape_1"
  op: "Shape"
  input: "loss-layer/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Shape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Exp_grad/mul"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Sum"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/Exp_grad/mul"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Neg"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN"
  op: "AddN"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/ReduceLogSumExp/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Exit_2_grad/b_exit"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Switch_2_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/Switch"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/Switch:1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Squeeze_grad/Shape"
  op: "Shape"
  input: "loss-layer/Slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Enter_2_grad/Exit"
  input: "OptimizeLoss/gradients/loss-layer/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/Enter"
  input: "loss-layer/rnn/while/Identity_2"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/b_sync"
  op: "ControlTrigger"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/StackPopV2"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/Enter"
  input: "loss-layer/rnn/while/GreaterEqual_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/zeros_like"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Shape"
  op: "Shape"
  input: "loss-layer/Slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/stack/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/stack"
  op: "Pack"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Rank"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Reshape"
  op: "Reshape"
  input: "loss-layer/Slice_3/begin"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Shape_1"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/sub"
  op: "Sub"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Shape_1"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/sub_1"
  op: "Sub"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/sub"
  input: "loss-layer/Slice_3/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/sub_1"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Reshape_1"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Pad"
  op: "Pad"
  input: "OptimizeLoss/gradients/loss-layer/Squeeze_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Shape"
  op: "Shape"
  input: "loss-layer/rnn/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "loss-layer/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "loss-layer/rnn/while/Identity"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Shape"
  op: "Shape"
  input: "loss-layer/rnn/while/ReduceLogSumExp/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Shape"
  op: "Shape"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Shape_1"
  op: "Shape"
  input: "loss-layer/rnn/while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Squeeze_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "loss-layer/rnn/TensorArray_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "loss-layer/rnn/TensorArrayUnstack/range"
  input: "OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/ReduceLogSumExp/Sum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/Enter"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Sum"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal/StackPopV2"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
  op: "Shape"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/add/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/add"
  op: "Add"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/add/Const"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/add"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/range/start"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/range/delta"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/range"
  op: "Range"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/range/start"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Size"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Fill/value"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Fill"
  op: "Fill"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/range"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/mod"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Maximum/y"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Maximum"
  op: "Maximum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch/StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Log_grad/mul"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Tile"
  op: "Tile"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/rnn/while/ReduceLogSumExp/Exp"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/Enter"
  input: "loss-layer/rnn/while/ReduceLogSumExp/Exp"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Sum_grad/Tile"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Shape"
  op: "Shape"
  input: "loss-layer/rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Shape_1"
  op: "Shape"
  input: "loss-layer/rnn/while/ReduceLogSumExp/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/Exp_grad/mul"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Neg"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "loss-layer/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/loss-layer/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_1"
  op: "AddN"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Shape"
  op: "Shape"
  input: "loss-layer/Slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/stack/1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/stack"
  op: "Pack"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Rank"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Reshape"
  op: "Reshape"
  input: "loss-layer/Slice_4/begin"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Shape_1"
  op: "Shape"
  input: "projection/reshape_predictions"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/sub"
  op: "Sub"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Shape_1"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/sub_1"
  op: "Sub"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/sub"
  input: "loss-layer/Slice_4/begin"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/sub_1"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Reshape_1"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Pad"
  op: "Pad"
  input: "OptimizeLoss/gradients/loss-layer/transpose_grad/transpose"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_2"
  op: "AddN"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/Slice_3_grad/Pad"
  input: "OptimizeLoss/gradients/loss-layer/Slice_4_grad/Pad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/reshape_predictions_grad/Shape"
  op: "Shape"
  input: "projection/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/reshape_predictions_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/AddN_2"
  input: "OptimizeLoss/gradients/projection/reshape_predictions_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/add_grad/Shape"
  op: "Shape"
  input: "projection/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/add_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/projection/add_grad/Shape"
  input: "OptimizeLoss/gradients/projection/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/projection/reshape_predictions_grad/Reshape"
  input: "OptimizeLoss/gradients/projection/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/projection/add_grad/Sum"
  input: "OptimizeLoss/gradients/projection/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/projection/reshape_predictions_grad/Reshape"
  input: "OptimizeLoss/gradients/projection/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/projection/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/projection/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/projection/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/projection/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/projection/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/projection/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/projection/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/projection/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/projection/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/projection/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/projection/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/projection/add_grad/tuple/control_dependency"
  input: "projection/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "projection/reshape_encoded_doc"
  input: "OptimizeLoss/gradients/projection/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/projection/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/projection/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/projection/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/projection/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/projection/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/projection/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/projection/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/projection/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/projection/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Shape"
  op: "Shape"
  input: "loss-layer/rnn/while/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\013\000\000\000\013\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ReduceLogSumExp/sub_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/reshape_encoded_doc_grad/Shape"
  op: "Shape"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/projection/reshape_encoded_doc_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/projection/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/projection/reshape_encoded_doc_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Shape"
  op: "Shape"
  input: "loss-layer/rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Shape"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/loss-layer/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Shape"
  op: "Shape"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Shape"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/projection/reshape_encoded_doc_grad/Reshape"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/mul"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Sum"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/div"
  input: "OptimizeLoss/gradients/projection/reshape_encoded_doc_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_3"
  op: "AddN"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/ExpandDims_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/rnn/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ExpandDims_6_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\013\000\000\000\013\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/ExpandDims_6_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/loss-layer/rnn/while/add/Enter_grad/b_acc_3"
  input: "OptimizeLoss/gradients/loss-layer/ExpandDims_6_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Shape"
  op: "Shape"
  input: "char_word_embeddings-mergeing_layer/sentence_words_concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Shape"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/RealDiv"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Sum"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Neg"
  op: "Neg"
  input: "char_word_embeddings-mergeing_layer/sentence_words_concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Neg"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/RealDiv_1"
  input: "char_word_embeddings-mergeing_layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/mul"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Sum_1"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 160
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/loss-layer/rnn/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_4"
  op: "AddN"
  input: "OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape"
  input: "OptimizeLoss/gradients/loss-layer/ExpandDims_6_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/mod"
  op: "FloorMod"
  input: "char_word_embeddings-mergeing_layer/sentence_words_concat/axis"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/ShapeN"
  op: "ShapeN"
  input: "chars_level_bilstm_layer/Reshape"
  input: "word_level_lstm_layer/concat"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/mod"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/ShapeN"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/dropout/dropout/div_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/Slice"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/Slice"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/Slice_1"
  input: "^OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/Reshape_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/Reshape_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/mod"
  op: "FloorMod"
  input: "word_level_lstm_layer/concat/axis"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/ShapeN"
  op: "ShapeN"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/transpose"
  input: "word_level_lstm_layer/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/mod"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/ShapeN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/char_word_embeddings-mergeing_layer/sentence_words_concat_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/Slice_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/mod"
  op: "FloorMod"
  input: "chars_level_bilstm_layer/concat/axis"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/ShapeN"
  op: "ShapeN"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/mod"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/ShapeN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/Reshape_grad/Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/Reshape_grad/Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/Slice_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like"
  op: "ZerosLike"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/concat_grad/tuple/control_dependency_1"
  input: "word-embed-layer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/range"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/transpose_grad/transpose"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/ReverseSequence_grad/ReverseSequence"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_3_grad/b_exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Exit_2_grad/b_exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_3_grad/b_exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Exit_2_grad/b_exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/range"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/transpose_grad/transpose"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_3_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/Switch"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_2_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/Switch"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_3_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/Switch"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_2_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/Switch"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_5_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_6"
  op: "ZerosLike"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_7"
  op: "ZerosLike"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_8"
  op: "ZerosLike"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like_9"
  op: "ZerosLike"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros_1_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Enter_3_grad/Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_3"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/b_sync"
  op: "ControlTrigger"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual_2"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Enter_2_grad/Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/LSTMCellZeroState/zeros_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_2"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/GreaterEqual_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros_1_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Enter_3_grad/Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_3"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/b_sync"
  op: "ControlTrigger"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual_2"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Enter_2_grad/Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/LSTMCellZeroState/zeros_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_2"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/GreaterEqual_1"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_1_grad/b_exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_2_grad/b_exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_3_grad/b_exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_4_grad/b_exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_5_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Exit_5_grad/b_exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_5_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_5_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_2"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Sum_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh_1"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_2"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Sum_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_1_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/Switch"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/Switch:1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_2_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/Switch"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_3_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/Switch"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_4_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/Switch"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/Switch:1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_5_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/Switch"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/Switch:1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_1_grad/b_exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_2_grad/b_exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_3_grad/b_exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_4_grad/b_exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_5_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Exit_5_grad/b_exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_5_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_5_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_1_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/Switch"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/Switch:1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_2_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/Switch"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_3_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/Switch"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_4_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/Switch"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/Switch:1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_5_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/Switch"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/Switch:1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_5_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_5"
  op: "AddN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Shape_1"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_5"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_5"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_6"
  op: "AddN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Shape_1"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_6"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_6"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_2_grad/Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_2"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_3_grad/Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_3"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_2"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_4_grad/Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_4"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_3"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Enter_5_grad/Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_5"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual_4"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Merge_5_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_5_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_1"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_1"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/zeros_like/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/GreaterEqual"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/zeros_like"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_2_grad/Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_2"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_3_grad/Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_3"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_2"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_4_grad/Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_4"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_3"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Enter_5_grad/Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/MultiRNNCellZeroState/DropoutWrapperZeroState_1/LSTMCellZeroState/zeros_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_5"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual_4"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Merge_5_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_7"
  op: "AddN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_8"
  op: "AddN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/zeros"
  op: "Fill"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/Shape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/b_acc"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/b_acc_1"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/b_acc"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/b_acc_2"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/Floor"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/zeros_like/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/GreaterEqual"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/zeros_like"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/zeros_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/zeros_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/zeros_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Neg"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/zeros"
  op: "Fill"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/Shape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/b_acc"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/b_acc_1"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/b_acc"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/b_acc_2"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/Floor"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Tanh_grad/TanhGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/add_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Tanh_grad/TanhGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/add_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/zeros_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/zeros_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/zeros_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Neg"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split_grad/concat"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split_grad/concat"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split_grad/concat"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split_grad/concat"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/mod/Const"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/mod"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/Slice_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/mod/Const"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/mod"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/Slice_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/while/Identity"
  input: "^OptimizeLoss/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_9"
  op: "AddN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/while/Identity"
  input: "^OptimizeLoss/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_10"
  op: "AddN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_11"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/AddN_11"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArray_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/range"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArray_1"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/range"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_12"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_1/dropout/div_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/AddN_12"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_13"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_13"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_13"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_5_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_14"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_3_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_14"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_14"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_15"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_3_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "chars_level_bilstm_layer/encode_words/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "chars_level_bilstm_layer/encode_words/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_16"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_3_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_3_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/transpose_grad/transpose"
  input: "chars_level_bilstm_layer/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2_grad/TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_3_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_17"
  op: "AddN"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/transpose_grad/transpose"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/reduce_dimension_1_grad/Shape"
  op: "Shape"
  input: "char_embed_layer/dropout/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/chars_level_bilstm_layer/reduce_dimension_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/AddN_17"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/reduce_dimension_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_4_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_2_grad/TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_5_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_1_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/mod/Const"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/mod"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/Floor"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_18"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_4_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/mod/Const"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/mod"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Neg"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_5_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/Floor"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_19"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_1_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_4_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Shape"
  op: "Shape"
  input: "char_embed_layer/dropout/dropout/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "char_embed_layer/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Shape"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/reduce_dimension_1_grad/Reshape"
  input: "char_embed_layer/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/mul"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Sum"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "char_embed_layer/dropout/dropout/div"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/reduce_dimension_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Neg"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_5_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Shape"
  op: "Shape"
  input: "char_embed_layer/EmbedSequence/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Shape"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "char_embed_layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/RealDiv"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Sum"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Neg"
  op: "Neg"
  input: "char_embed_layer/EmbedSequence/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Neg"
  input: "char_embed_layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/RealDiv_1"
  input: "char_embed_layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/mul"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Sum_1"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_20"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/AddN_20"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_21"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/dropout/div_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/AddN_21"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "X\000\000\000\000\000\000\000 \000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/Size"
  op: "Size"
  input: "train-data/IteratorGetNext"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/Size"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/ToInt32"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack_1"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/ExpandDims"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/strided_slice"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/char_embed_layer/dropout/dropout/div_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "train-data/IteratorGetNext"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_22"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_22"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_22"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_23"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_23"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_23"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_24"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Shape_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_25"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_grad/TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Tanh_grad/TanhGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/add_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_26"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/mod/Const"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3"
  input: "^OptimizeLoss/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/mod"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_27"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_28"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd_1_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_29"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/mod/Const"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3"
  input: "^OptimizeLoss/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/zeros_like/StackPopV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/mod"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_30"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/AddN_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/Sub_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_31"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArray_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/range"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArray_1"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/range"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "word_level_lstm_layer/encod_sentence/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "word_level_lstm_layer/encod_sentence/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/transpose_grad/transpose"
  input: "word-embed-layer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_32"
  op: "AddN"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/transpose_grad/transpose"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Shape"
  op: "Shape"
  input: "word-embed-layer/dropout/dropout/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "word-embed-layer/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Shape"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/AddN_32"
  input: "word-embed-layer/dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/mul"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Sum"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "word-embed-layer/dropout/dropout/div"
  input: "OptimizeLoss/gradients/AddN_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Shape"
  op: "Shape"
  input: "word-embed-layer/EmbedSequence/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Shape"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "word-embed-layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/RealDiv"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Sum"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Neg"
  op: "Neg"
  input: "word-embed-layer/EmbedSequence/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Neg"
  input: "word-embed-layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/RealDiv_1"
  input: "word-embed-layer/dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/mul"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Sum_1"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "3&\000\000\000\000\000\0000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/Size"
  op: "Size"
  input: "sentence-words-2-ids/hash_table_Lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/Size"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/ToInt32"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack_1"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/ExpandDims"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/strided_slice"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/word-embed-layer/dropout/dropout/div_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "sentence-words-2-ids/hash_table_Lookup"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_1"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_2"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_3"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_4"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_5"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_6"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_7"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_8"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_9"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_10"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/projection/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/projection/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_11"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/projection/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/projection/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_12"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/loss-layer/Reshape_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/stack"
  op: "Pack"
  input: "OptimizeLoss/global_norm/L2Loss"
  input: "OptimizeLoss/global_norm/L2Loss_1"
  input: "OptimizeLoss/global_norm/L2Loss_2"
  input: "OptimizeLoss/global_norm/L2Loss_3"
  input: "OptimizeLoss/global_norm/L2Loss_4"
  input: "OptimizeLoss/global_norm/L2Loss_5"
  input: "OptimizeLoss/global_norm/L2Loss_6"
  input: "OptimizeLoss/global_norm/L2Loss_7"
  input: "OptimizeLoss/global_norm/L2Loss_8"
  input: "OptimizeLoss/global_norm/L2Loss_9"
  input: "OptimizeLoss/global_norm/L2Loss_10"
  input: "OptimizeLoss/global_norm/L2Loss_11"
  input: "OptimizeLoss/global_norm/L2Loss_12"
  attr {
    key: "N"
    value {
      i: 13
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/Sum"
  op: "Sum"
  input: "OptimizeLoss/global_norm/stack"
  input: "OptimizeLoss/global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/mul"
  op: "Mul"
  input: "OptimizeLoss/global_norm/Sum"
  input: "OptimizeLoss/global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/global_norm"
  op: "Sqrt"
  input: "OptimizeLoss/global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/gradient_norm/tags"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "OptimizeLoss/global_norm/gradient_norm"
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/gradient_norm"
  op: "ScalarSummary"
  input: "OptimizeLoss/global_norm/gradient_norm/tags"
  input: "OptimizeLoss/global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/loss/tags"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "OptimizeLoss/loss"
      }
    }
  }
}
node {
  name: "OptimizeLoss/loss"
  op: "ScalarSummary"
  input: "OptimizeLoss/loss/tags"
  input: "loss-layer/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power/Assign"
  op: "Assign"
  input: "OptimizeLoss/beta1_power"
  input: "OptimizeLoss/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power/read"
  op: "Identity"
  input: "OptimizeLoss/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power/Assign"
  op: "Assign"
  input: "OptimizeLoss/beta2_power"
  input: "OptimizeLoss/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power/read"
  op: "Identity"
  input: "OptimizeLoss/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9779
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9779
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 88
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 88
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/projection/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/projection/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
        dim {
          size: 11
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/projection/W/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/projection/W/Adam"
  input: "OptimizeLoss/projection/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/projection/W/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/projection/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/projection/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/projection/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
        dim {
          size: 11
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/projection/W/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/projection/W/Adam_1"
  input: "OptimizeLoss/projection/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/projection/W/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/projection/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/projection/b/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 11
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/projection/b/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 11
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/projection/b/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/projection/b/Adam"
  input: "OptimizeLoss/projection/b/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/projection/b/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/projection/b/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/projection/b/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 11
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/projection/b/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 11
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/projection/b/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/projection/b/Adam_1"
  input: "OptimizeLoss/projection/b/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/projection/b/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/projection/b/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/loss-layer/transitions/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/loss-layer/transitions/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 11
        }
        dim {
          size: 11
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/loss-layer/transitions/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/loss-layer/transitions/Adam"
  input: "OptimizeLoss/loss-layer/transitions/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/loss-layer/transitions/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/loss-layer/transitions/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/loss-layer/transitions/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/loss-layer/transitions/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 11
        }
        dim {
          size: 11
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/loss-layer/transitions/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/loss-layer/transitions/Adam_1"
  input: "OptimizeLoss/loss-layer/transitions/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/loss-layer/transitions/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/loss-layer/transitions/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/beta1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/beta2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/epsilon"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Unique"
  op: "Unique"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Shape"
  op: "Shape"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/strided_slice"
  op: "StridedSlice"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Shape"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/strided_slice/stack"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/strided_slice/stack_1"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "OptimizeLoss/gradients/word-embed-layer/EmbedSequence/embedding_lookup_grad/Reshape"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Unique:1"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub"
  op: "Sub"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub/x"
  input: "OptimizeLoss/beta2_power/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Sqrt"
  op: "Sqrt"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul"
  op: "Mul"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_1/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_1"
  op: "Sub"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_1/x"
  input: "OptimizeLoss/beta1_power/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/truediv"
  op: "RealDiv"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_2/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_2"
  op: "Sub"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_2/x"
  input: "OptimizeLoss/train/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_1"
  op: "Mul"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/UnsortedSegmentSum"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_2"
  op: "Mul"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam/read"
  input: "OptimizeLoss/train/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Assign"
  op: "Assign"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/ScatterAdd"
  op: "ScatterAdd"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Unique"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_1"
  input: "^OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Assign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_3"
  op: "Mul"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/UnsortedSegmentSum"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/UnsortedSegmentSum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_3/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_3"
  op: "Sub"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_3/x"
  input: "OptimizeLoss/train/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_4"
  op: "Mul"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_3"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_5"
  op: "Mul"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1/read"
  input: "OptimizeLoss/train/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Assign_1"
  op: "Assign"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/ScatterAdd_1"
  op: "ScatterAdd"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Unique"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_4"
  input: "^OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Assign_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Sqrt_1"
  op: "Sqrt"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/ScatterAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_6"
  op: "Mul"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/truediv"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/ScatterAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/add"
  op: "Add"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/Sqrt_1"
  input: "OptimizeLoss/train/epsilon"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/truediv_1"
  op: "RealDiv"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/mul_6"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/AssignSub"
  op: "AssignSub"
  input: "word-embed-layer/EmbedSequence/embeddings"
  input: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/AssignSub"
  input: "^OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/ScatterAdd"
  input: "^OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/ScatterAdd_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Unique"
  op: "Unique"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Shape"
  op: "Shape"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/strided_slice"
  op: "StridedSlice"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Shape"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/strided_slice/stack"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/strided_slice/stack_1"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "OptimizeLoss/gradients/char_embed_layer/EmbedSequence/embedding_lookup_grad/Reshape"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Unique:1"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub"
  op: "Sub"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub/x"
  input: "OptimizeLoss/beta2_power/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Sqrt"
  op: "Sqrt"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul"
  op: "Mul"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_1/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_1"
  op: "Sub"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_1/x"
  input: "OptimizeLoss/beta1_power/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/truediv"
  op: "RealDiv"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_2/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_2"
  op: "Sub"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_2/x"
  input: "OptimizeLoss/train/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_1"
  op: "Mul"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/UnsortedSegmentSum"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_2"
  op: "Mul"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam/read"
  input: "OptimizeLoss/train/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Assign"
  op: "Assign"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/ScatterAdd"
  op: "ScatterAdd"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Unique"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_1"
  input: "^OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Assign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_3"
  op: "Mul"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/UnsortedSegmentSum"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/UnsortedSegmentSum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_3/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_3"
  op: "Sub"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_3/x"
  input: "OptimizeLoss/train/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_4"
  op: "Mul"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_3"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_5"
  op: "Mul"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1/read"
  input: "OptimizeLoss/train/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Assign_1"
  op: "Assign"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/ScatterAdd_1"
  op: "ScatterAdd"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Unique"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_4"
  input: "^OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Assign_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Sqrt_1"
  op: "Sqrt"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/ScatterAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_6"
  op: "Mul"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/truediv"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/ScatterAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/add"
  op: "Add"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/Sqrt_1"
  input: "OptimizeLoss/train/epsilon"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/truediv_1"
  op: "RealDiv"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/mul_6"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/AssignSub"
  op: "AssignSub"
  input: "char_embed_layer/EmbedSequence/embeddings"
  input: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/AssignSub"
  input: "^OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/ScatterAdd"
  input: "^OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/ScatterAdd_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/fw/fw/while/fw/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/chars_level_bilstm_layer/encode_words/bw/bw/while/bw/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/fw/fw/while/fw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/word_level_lstm_layer/encod_sentence/bw/bw/while/bw/multi_rnn_cell/cell_0/cell_0/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_projection/W/ApplyAdam"
  op: "ApplyAdam"
  input: "projection/W"
  input: "OptimizeLoss/projection/W/Adam"
  input: "OptimizeLoss/projection/W/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/projection/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_projection/b/ApplyAdam"
  op: "ApplyAdam"
  input: "projection/b"
  input: "OptimizeLoss/projection/b/Adam"
  input: "OptimizeLoss/projection/b/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/projection/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_loss-layer/transitions/ApplyAdam"
  op: "ApplyAdam"
  input: "loss-layer/transitions"
  input: "OptimizeLoss/loss-layer/transitions/Adam"
  input: "OptimizeLoss/loss-layer/transitions/Adam_1"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/learning_rate/read"
  input: "OptimizeLoss/train/beta1"
  input: "OptimizeLoss/train/beta2"
  input: "OptimizeLoss/train/epsilon"
  input: "OptimizeLoss/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/mul"
  op: "Mul"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/train/beta1"
  input: "^OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/group_deps"
  input: "^OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/group_deps"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_projection/W/ApplyAdam"
  input: "^OptimizeLoss/train/update_projection/b/ApplyAdam"
  input: "^OptimizeLoss/train/update_loss-layer/transitions/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/Assign"
  op: "Assign"
  input: "OptimizeLoss/beta1_power"
  input: "OptimizeLoss/train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/mul_1"
  op: "Mul"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/train/beta2"
  input: "^OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/group_deps"
  input: "^OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/group_deps"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_projection/W/ApplyAdam"
  input: "^OptimizeLoss/train/update_projection/b/ApplyAdam"
  input: "^OptimizeLoss/train/update_loss-layer/transitions/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/Assign_1"
  op: "Assign"
  input: "OptimizeLoss/beta2_power"
  input: "OptimizeLoss/train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/update"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/train/update_word-embed-layer/EmbedSequence/embeddings/group_deps"
  input: "^OptimizeLoss/train/update_char_embed_layer/EmbedSequence/embeddings/group_deps"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_projection/W/ApplyAdam"
  input: "^OptimizeLoss/train/update_projection/b/ApplyAdam"
  input: "^OptimizeLoss/train/update_loss-layer/transitions/ApplyAdam"
  input: "^OptimizeLoss/train/Assign"
  input: "^OptimizeLoss/train/Assign_1"
}
node {
  name: "OptimizeLoss/train/value"
  op: "Const"
  input: "^add"
  input: "^OptimizeLoss/train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/train"
  op: "AssignAdd"
  input: "global_step"
  input: "OptimizeLoss/train/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/control_dependency"
  op: "Identity"
  input: "loss-layer/Mean"
  input: "^OptimizeLoss/train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/Mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "loss-layer/ReverseSequence_1"
  input: "ner-tags-2-ids/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "accuracy/total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/total/Assign"
  op: "Assign"
  input: "accuracy/total"
  input: "accuracy/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/total/read"
  op: "Identity"
  input: "accuracy/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "accuracy/count/Assign"
  op: "Assign"
  input: "accuracy/count"
  input: "accuracy/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "accuracy/count/read"
  op: "Identity"
  input: "accuracy/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Size"
  op: "Size"
  input: "ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "accuracy/ToFloat_1"
  op: "Cast"
  input: "accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "accuracy/Sum"
  op: "Sum"
  input: "ToFloat"
  input: "accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd"
  op: "AssignAdd"
  input: "accuracy/total"
  input: "accuracy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/AssignAdd_1"
  op: "AssignAdd"
  input: "accuracy/count"
  input: "accuracy/ToFloat_1"
  input: "^ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/Greater/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Greater"
  op: "Greater"
  input: "accuracy/count/read"
  input: "accuracy/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/truediv"
  op: "RealDiv"
  input: "accuracy/total/read"
  input: "accuracy/count/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/value/e"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/value"
  op: "Select"
  input: "accuracy/Greater"
  input: "accuracy/truediv"
  input: "accuracy/value/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/Greater_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/Greater_1"
  op: "Greater"
  input: "accuracy/AssignAdd_1"
  input: "accuracy/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/truediv_1"
  op: "RealDiv"
  input: "accuracy/AssignAdd"
  input: "accuracy/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "accuracy/update_op/e"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "accuracy/update_op"
  op: "Select"
  input: "accuracy/Greater_1"
  input: "accuracy/truediv_1"
  input: "accuracy/update_op/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/Cast"
  op: "Cast"
  input: "loss-layer/ReverseSequence_1"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Precision/Cast_1"
  op: "Cast"
  input: "ner-tags-2-ids/Cast"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Precision/true_positives/Equal/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "Precision/true_positives/Equal"
  op: "Equal"
  input: "Precision/Cast_1"
  input: "Precision/true_positives/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Precision/true_positives/Equal_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "Precision/true_positives/Equal_1"
  op: "Equal"
  input: "Precision/Cast"
  input: "Precision/true_positives/Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Precision/true_positives/LogicalAnd"
  op: "LogicalAnd"
  input: "Precision/true_positives/Equal"
  input: "Precision/true_positives/Equal_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Precision/true_positives/assert_type/statically_determined_correct_type"
  op: "NoOp"
  input: "^add"
}
node {
  name: "Precision/true_positives/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Precision/true_positives/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Precision/true_positives/count/Assign"
  op: "Assign"
  input: "Precision/true_positives/count"
  input: "Precision/true_positives/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Precision/true_positives/count/read"
  op: "Identity"
  input: "Precision/true_positives/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/true_positives/ToFloat"
  op: "Cast"
  input: "Precision/true_positives/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Precision/true_positives/Identity"
  op: "Identity"
  input: "Precision/true_positives/count/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/true_positives/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Precision/true_positives/Sum"
  op: "Sum"
  input: "Precision/true_positives/ToFloat"
  input: "Precision/true_positives/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Precision/true_positives/AssignAdd"
  op: "AssignAdd"
  input: "Precision/true_positives/count"
  input: "Precision/true_positives/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Precision/false_positives/Equal/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "Precision/false_positives/Equal"
  op: "Equal"
  input: "Precision/Cast_1"
  input: "Precision/false_positives/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Precision/false_positives/Equal_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "Precision/false_positives/Equal_1"
  op: "Equal"
  input: "Precision/Cast"
  input: "Precision/false_positives/Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Precision/false_positives/LogicalAnd"
  op: "LogicalAnd"
  input: "Precision/false_positives/Equal"
  input: "Precision/false_positives/Equal_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Precision/false_positives/assert_type/statically_determined_correct_type"
  op: "NoOp"
  input: "^add"
}
node {
  name: "Precision/false_positives/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/false_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Precision/false_positives/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/false_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Precision/false_positives/count/Assign"
  op: "Assign"
  input: "Precision/false_positives/count"
  input: "Precision/false_positives/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/false_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Precision/false_positives/count/read"
  op: "Identity"
  input: "Precision/false_positives/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/false_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/false_positives/ToFloat"
  op: "Cast"
  input: "Precision/false_positives/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Precision/false_positives/Identity"
  op: "Identity"
  input: "Precision/false_positives/count/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/false_positives/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Precision/false_positives/Sum"
  op: "Sum"
  input: "Precision/false_positives/ToFloat"
  input: "Precision/false_positives/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Precision/false_positives/AssignAdd"
  op: "AssignAdd"
  input: "Precision/false_positives/count"
  input: "Precision/false_positives/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/false_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Precision/add"
  op: "Add"
  input: "Precision/true_positives/Identity"
  input: "Precision/false_positives/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/Greater/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Precision/Greater"
  op: "Greater"
  input: "Precision/add"
  input: "Precision/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/add_1"
  op: "Add"
  input: "Precision/true_positives/Identity"
  input: "Precision/false_positives/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/div"
  op: "RealDiv"
  input: "Precision/true_positives/Identity"
  input: "Precision/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/value/e"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Precision/value"
  op: "Select"
  input: "Precision/Greater"
  input: "Precision/div"
  input: "Precision/value/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/add_2"
  op: "Add"
  input: "Precision/true_positives/AssignAdd"
  input: "Precision/false_positives/AssignAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/Greater_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Precision/Greater_1"
  op: "Greater"
  input: "Precision/add_2"
  input: "Precision/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/add_3"
  op: "Add"
  input: "Precision/true_positives/AssignAdd"
  input: "Precision/false_positives/AssignAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/div_1"
  op: "RealDiv"
  input: "Precision/true_positives/AssignAdd"
  input: "Precision/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Precision/update_op/e"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Precision/update_op"
  op: "Select"
  input: "Precision/Greater_1"
  input: "Precision/div_1"
  input: "Precision/update_op/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/Cast"
  op: "Cast"
  input: "loss-layer/ReverseSequence_1"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Recall/Cast_1"
  op: "Cast"
  input: "ner-tags-2-ids/Cast"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Recall/true_positives/Equal/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "Recall/true_positives/Equal"
  op: "Equal"
  input: "Recall/Cast_1"
  input: "Recall/true_positives/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Recall/true_positives/Equal_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "Recall/true_positives/Equal_1"
  op: "Equal"
  input: "Recall/Cast"
  input: "Recall/true_positives/Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Recall/true_positives/LogicalAnd"
  op: "LogicalAnd"
  input: "Recall/true_positives/Equal"
  input: "Recall/true_positives/Equal_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Recall/true_positives/assert_type/statically_determined_correct_type"
  op: "NoOp"
  input: "^add"
}
node {
  name: "Recall/true_positives/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Recall/true_positives/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Recall/true_positives/count/Assign"
  op: "Assign"
  input: "Recall/true_positives/count"
  input: "Recall/true_positives/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Recall/true_positives/count/read"
  op: "Identity"
  input: "Recall/true_positives/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/true_positives/ToFloat"
  op: "Cast"
  input: "Recall/true_positives/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Recall/true_positives/Identity"
  op: "Identity"
  input: "Recall/true_positives/count/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/true_positives/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Recall/true_positives/Sum"
  op: "Sum"
  input: "Recall/true_positives/ToFloat"
  input: "Recall/true_positives/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Recall/true_positives/AssignAdd"
  op: "AssignAdd"
  input: "Recall/true_positives/count"
  input: "Recall/true_positives/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Recall/false_negatives/Equal/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "Recall/false_negatives/Equal"
  op: "Equal"
  input: "Recall/Cast_1"
  input: "Recall/false_negatives/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Recall/false_negatives/Equal_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "Recall/false_negatives/Equal_1"
  op: "Equal"
  input: "Recall/Cast"
  input: "Recall/false_negatives/Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Recall/false_negatives/LogicalAnd"
  op: "LogicalAnd"
  input: "Recall/false_negatives/Equal"
  input: "Recall/false_negatives/Equal_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Recall/false_negatives/assert_type/statically_determined_correct_type"
  op: "NoOp"
  input: "^add"
}
node {
  name: "Recall/false_negatives/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/false_negatives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Recall/false_negatives/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/false_negatives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Recall/false_negatives/count/Assign"
  op: "Assign"
  input: "Recall/false_negatives/count"
  input: "Recall/false_negatives/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/false_negatives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Recall/false_negatives/count/read"
  op: "Identity"
  input: "Recall/false_negatives/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/false_negatives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/false_negatives/ToFloat"
  op: "Cast"
  input: "Recall/false_negatives/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Recall/false_negatives/Identity"
  op: "Identity"
  input: "Recall/false_negatives/count/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/false_negatives/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Recall/false_negatives/Sum"
  op: "Sum"
  input: "Recall/false_negatives/ToFloat"
  input: "Recall/false_negatives/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Recall/false_negatives/AssignAdd"
  op: "AssignAdd"
  input: "Recall/false_negatives/count"
  input: "Recall/false_negatives/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/false_negatives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Recall/add"
  op: "Add"
  input: "Recall/true_positives/Identity"
  input: "Recall/false_negatives/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/Greater/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Recall/Greater"
  op: "Greater"
  input: "Recall/add"
  input: "Recall/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/add_1"
  op: "Add"
  input: "Recall/true_positives/Identity"
  input: "Recall/false_negatives/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/div"
  op: "RealDiv"
  input: "Recall/true_positives/Identity"
  input: "Recall/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/value/e"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Recall/value"
  op: "Select"
  input: "Recall/Greater"
  input: "Recall/div"
  input: "Recall/value/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/add_2"
  op: "Add"
  input: "Recall/true_positives/AssignAdd"
  input: "Recall/false_negatives/AssignAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/Greater_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Recall/Greater_1"
  op: "Greater"
  input: "Recall/add_2"
  input: "Recall/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/add_3"
  op: "Add"
  input: "Recall/true_positives/AssignAdd"
  input: "Recall/false_negatives/AssignAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/div_1"
  op: "RealDiv"
  input: "Recall/true_positives/AssignAdd"
  input: "Recall/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Recall/update_op/e"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Recall/update_op"
  op: "Select"
  input: "Recall/Greater_1"
  input: "Recall/div_1"
  input: "Recall/update_op/e"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "loss-layer/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^word-embed-layer/EmbedSequence/embeddings/Assign"
  input: "^char_embed_layer/EmbedSequence/embeddings/Assign"
  input: "^chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Assign"
  input: "^chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Assign"
  input: "^chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Assign"
  input: "^chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Assign"
  input: "^word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  input: "^word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  input: "^word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Assign"
  input: "^word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Assign"
  input: "^projection/W/Assign"
  input: "^projection/b/Assign"
  input: "^loss-layer/transitions/Assign"
  input: "^OptimizeLoss/learning_rate/Assign"
  input: "^OptimizeLoss/beta1_power/Assign"
  input: "^OptimizeLoss/beta2_power/Assign"
  input: "^OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam/Assign"
  input: "^OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1/Assign"
  input: "^OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam/Assign"
  input: "^OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1/Assign"
  input: "^OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam/Assign"
  input: "^OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam/Assign"
  input: "^OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1/Assign"
  input: "^OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam/Assign"
  input: "^OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam/Assign"
  input: "^OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1/Assign"
  input: "^OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  input: "^OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  input: "^OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  input: "^OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam/Assign"
  input: "^OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam/Assign"
  input: "^OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1/Assign"
  input: "^OptimizeLoss/projection/W/Adam/Assign"
  input: "^OptimizeLoss/projection/W/Adam_1/Assign"
  input: "^OptimizeLoss/projection/b/Adam/Assign"
  input: "^OptimizeLoss/projection/b/Adam_1/Assign"
  input: "^OptimizeLoss/loss-layer/transitions/Adam/Assign"
  input: "^OptimizeLoss/loss-layer/transitions/Adam_1/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "word-embed-layer/EmbedSequence/embeddings"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "char_embed_layer/EmbedSequence/embeddings"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "projection/W"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "projection/b"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "loss-layer/transitions"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/projection/W/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/projection/W/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/projection/b/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/projection/b/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/loss-layer/transitions/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/loss-layer/transitions/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "accuracy/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "accuracy/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@accuracy/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "Precision/true_positives/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "Precision/false_positives/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Precision/false_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "Recall/true_positives/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/true_positives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "Recall/false_negatives/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Recall/false_negatives/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 49
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 49
          }
        }
        string_val: "global_step"
        string_val: "word-embed-layer/EmbedSequence/embeddings"
        string_val: "char_embed_layer/EmbedSequence/embeddings"
        string_val: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
        string_val: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
        string_val: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
        string_val: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
        string_val: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "projection/W"
        string_val: "projection/b"
        string_val: "loss-layer/transitions"
        string_val: "OptimizeLoss/learning_rate"
        string_val: "OptimizeLoss/beta1_power"
        string_val: "OptimizeLoss/beta2_power"
        string_val: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
        string_val: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
        string_val: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
        string_val: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/projection/W/Adam"
        string_val: "OptimizeLoss/projection/W/Adam_1"
        string_val: "OptimizeLoss/projection/b/Adam"
        string_val: "OptimizeLoss/projection/b/Adam_1"
        string_val: "OptimizeLoss/loss-layer/transitions/Adam"
        string_val: "OptimizeLoss/loss-layer/transitions/Adam_1"
        string_val: "accuracy/total"
        string_val: "accuracy/count"
        string_val: "Precision/true_positives/count"
        string_val: "Precision/false_positives/count"
        string_val: "Recall/true_positives/count"
        string_val: "Recall/false_negatives/count"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 49
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 49
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 49
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "word-embed-layer/EmbedSequence/embeddings"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "char_embed_layer/EmbedSequence/embeddings"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "projection/W"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "projection/b"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "loss-layer/transitions"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/projection/W/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/projection/W/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/projection/b/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/projection/b/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/loss-layer/transitions/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/loss-layer/transitions/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_28"
  input: "report_uninitialized_variables_1/IsVariableInitialized_29"
  input: "report_uninitialized_variables_1/IsVariableInitialized_30"
  input: "report_uninitialized_variables_1/IsVariableInitialized_31"
  input: "report_uninitialized_variables_1/IsVariableInitialized_32"
  input: "report_uninitialized_variables_1/IsVariableInitialized_33"
  input: "report_uninitialized_variables_1/IsVariableInitialized_34"
  input: "report_uninitialized_variables_1/IsVariableInitialized_35"
  input: "report_uninitialized_variables_1/IsVariableInitialized_36"
  input: "report_uninitialized_variables_1/IsVariableInitialized_37"
  input: "report_uninitialized_variables_1/IsVariableInitialized_38"
  input: "report_uninitialized_variables_1/IsVariableInitialized_39"
  input: "report_uninitialized_variables_1/IsVariableInitialized_40"
  input: "report_uninitialized_variables_1/IsVariableInitialized_41"
  input: "report_uninitialized_variables_1/IsVariableInitialized_42"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 43
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 43
          }
        }
        string_val: "global_step"
        string_val: "word-embed-layer/EmbedSequence/embeddings"
        string_val: "char_embed_layer/EmbedSequence/embeddings"
        string_val: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
        string_val: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
        string_val: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
        string_val: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
        string_val: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "projection/W"
        string_val: "projection/b"
        string_val: "loss-layer/transitions"
        string_val: "OptimizeLoss/learning_rate"
        string_val: "OptimizeLoss/beta1_power"
        string_val: "OptimizeLoss/beta2_power"
        string_val: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
        string_val: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
        string_val: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
        string_val: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/projection/W/Adam"
        string_val: "OptimizeLoss/projection/W/Adam_1"
        string_val: "OptimizeLoss/projection/b/Adam"
        string_val: "OptimizeLoss/projection/b/Adam_1"
        string_val: "OptimizeLoss/loss-layer/transitions/Adam"
        string_val: "OptimizeLoss/loss-layer/transitions/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 43
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 43
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^accuracy/total/Assign"
  input: "^accuracy/count/Assign"
  input: "^Precision/true_positives/count/Assign"
  input: "^Precision/false_positives/count/Assign"
  input: "^Recall/true_positives/count/Assign"
  input: "^Recall/false_negatives/count/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^sentence-words-2-ids/table/hash_table/table_init"
  input: "^ner-tags-2-ids/table/hash_table/table_init"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss-layer/loss"
  input: "OptimizeLoss/global_norm/gradient_norm"
  input: "OptimizeLoss/loss"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_da2253f121f44438a8abad579c20e710/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 43
          }
        }
        string_val: "OptimizeLoss/beta1_power"
        string_val: "OptimizeLoss/beta2_power"
        string_val: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
        string_val: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/learning_rate"
        string_val: "OptimizeLoss/loss-layer/transitions/Adam"
        string_val: "OptimizeLoss/loss-layer/transitions/Adam_1"
        string_val: "OptimizeLoss/projection/W/Adam"
        string_val: "OptimizeLoss/projection/W/Adam_1"
        string_val: "OptimizeLoss/projection/b/Adam"
        string_val: "OptimizeLoss/projection/b/Adam_1"
        string_val: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
        string_val: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
        string_val: "char_embed_layer/EmbedSequence/embeddings"
        string_val: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
        string_val: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
        string_val: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
        string_val: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
        string_val: "global_step"
        string_val: "loss-layer/transitions"
        string_val: "projection/W"
        string_val: "projection/b"
        string_val: "word-embed-layer/EmbedSequence/embeddings"
        string_val: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
        string_val: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
        string_val: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 43
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 43
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "OptimizeLoss/beta1_power"
  input: "OptimizeLoss/beta2_power"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/learning_rate"
  input: "OptimizeLoss/loss-layer/transitions/Adam"
  input: "OptimizeLoss/loss-layer/transitions/Adam_1"
  input: "OptimizeLoss/projection/W/Adam"
  input: "OptimizeLoss/projection/W/Adam_1"
  input: "OptimizeLoss/projection/b/Adam"
  input: "OptimizeLoss/projection/b/Adam_1"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "char_embed_layer/EmbedSequence/embeddings"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
  input: "global_step"
  input: "loss-layer/transitions"
  input: "projection/W"
  input: "projection/b"
  input: "word-embed-layer/EmbedSequence/embeddings"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/control_dependency"
  input: "^save/MergeV2Checkpoints"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/beta1_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "OptimizeLoss/beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "OptimizeLoss/beta2_power"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "OptimizeLoss/char_embed_layer/EmbedSequence/embeddings/Adam_1"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "OptimizeLoss/chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/learning_rate"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "OptimizeLoss/learning_rate"
  input: "save/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/loss-layer/transitions/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "OptimizeLoss/loss-layer/transitions/Adam"
  input: "save/RestoreV2_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/loss-layer/transitions/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "OptimizeLoss/loss-layer/transitions/Adam_1"
  input: "save/RestoreV2_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/projection/W/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "OptimizeLoss/projection/W/Adam"
  input: "save/RestoreV2_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_16/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/projection/W/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_16"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_16/tensor_names"
  input: "save/RestoreV2_16/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "OptimizeLoss/projection/W/Adam_1"
  input: "save/RestoreV2_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_17/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/projection/b/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_17/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_17"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_17/tensor_names"
  input: "save/RestoreV2_17/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "OptimizeLoss/projection/b/Adam"
  input: "save/RestoreV2_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_18/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/projection/b/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_18/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_18"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_18/tensor_names"
  input: "save/RestoreV2_18/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "OptimizeLoss/projection/b/Adam_1"
  input: "save/RestoreV2_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_19/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_19/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_19"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_19/tensor_names"
  input: "save/RestoreV2_19/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam"
  input: "save/RestoreV2_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_20/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_20/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_20"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_20/tensor_names"
  input: "save/RestoreV2_20/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "OptimizeLoss/word-embed-layer/EmbedSequence/embeddings/Adam_1"
  input: "save/RestoreV2_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_21/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_21/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_21"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_21/tensor_names"
  input: "save/RestoreV2_21/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "save/RestoreV2_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_22/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_22/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_22"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_22/tensor_names"
  input: "save/RestoreV2_22/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_23/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_23/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_23"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_23/tensor_names"
  input: "save/RestoreV2_23/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "save/RestoreV2_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_24/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_24/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_24"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_24/tensor_names"
  input: "save/RestoreV2_24/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_25/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_25/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_25"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_25/tensor_names"
  input: "save/RestoreV2_25/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam"
  input: "save/RestoreV2_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_26/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_26/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_26"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_26/tensor_names"
  input: "save/RestoreV2_26/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_27/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_27/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_27"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_27/tensor_names"
  input: "save/RestoreV2_27/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam"
  input: "save/RestoreV2_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_28/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_28/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_28"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_28/tensor_names"
  input: "save/RestoreV2_28/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "OptimizeLoss/word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_29/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
}
node {
  name: "save/RestoreV2_29/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_29"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_29/tensor_names"
  input: "save/RestoreV2_29/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "char_embed_layer/EmbedSequence/embeddings"
  input: "save/RestoreV2_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@char_embed_layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 88
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_30/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_30/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_30"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_30/tensor_names"
  input: "save/RestoreV2_30/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
  input: "save/RestoreV2_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_31/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_31/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_31"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_31/tensor_names"
  input: "save/RestoreV2_31/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
  input: "save/RestoreV2_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_32/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_32/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_32"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_32/tensor_names"
  input: "save/RestoreV2_32/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
  input: "save/RestoreV2_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_33/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_33/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_33"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_33/tensor_names"
  input: "save/RestoreV2_33/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
  input: "save/RestoreV2_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@chars_level_bilstm_layer/encode_words/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_34/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_34/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_34"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_34/tensor_names"
  input: "save/RestoreV2_34/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2_34"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_35/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "loss-layer/transitions"
      }
    }
  }
}
node {
  name: "save/RestoreV2_35/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_35"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_35/tensor_names"
  input: "save/RestoreV2_35/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "loss-layer/transitions"
  input: "save/RestoreV2_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss-layer/transitions"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_36/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "projection/W"
      }
    }
  }
}
node {
  name: "save/RestoreV2_36/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_36"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_36/tensor_names"
  input: "save/RestoreV2_36/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "projection/W"
  input: "save/RestoreV2_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 160
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_37/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "projection/b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_37/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_37"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_37/tensor_names"
  input: "save/RestoreV2_37/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "projection/b"
  input: "save/RestoreV2_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_38/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
}
node {
  name: "save/RestoreV2_38/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_38"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_38/tensor_names"
  input: "save/RestoreV2_38/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "word-embed-layer/EmbedSequence/embeddings"
  input: "save/RestoreV2_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word-embed-layer/EmbedSequence/embeddings"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9779
          }
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_39/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_39/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_39"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_39/tensor_names"
  input: "save/RestoreV2_39/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "save/RestoreV2_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_40/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_40/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_40"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_40/tensor_names"
  input: "save/RestoreV2_40/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "save/RestoreV2_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/bw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_41/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_41/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_41"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_41/tensor_names"
  input: "save/RestoreV2_41/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
  input: "save/RestoreV2_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_42/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_42/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_42"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_42/tensor_names"
  input: "save/RestoreV2_42/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
  input: "save/RestoreV2_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@word_level_lstm_layer/encod_sentence/fw/multi_rnn_cell/cell_0/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 96
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 24
}
